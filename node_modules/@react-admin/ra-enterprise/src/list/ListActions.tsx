import * as React from 'react';
import { cloneElement, useMemo, ReactElement, useContext } from 'react';
import PropTypes from 'prop-types';

import {
    sanitizeListRestProps,
    useListContext,
    useResourceContext,
    useResourceDefinition,
    CreateButton,
    ExportButton,
    ListActions as RaListActions,
    ListActionsProps as RaListActionsProps,
    TopToolbar,
    FilterContext,
    FilterButton,
} from 'react-admin';
import { Breadcrumb } from '../layout';
import { BreadcrumbProps } from '@react-admin/ra-navigation';

export const ListActions = (props: ListActionsProps): ReactElement => {
    const {
        breadcrumb,
        className,
        exporter,
        filters: filtersProp,
        ...rest
    } = props;

    const {
        currentSort,
        displayedFilters,
        filterValues,
        basePath,
        selectedIds,
        showFilter,
        total,
    } = useListContext(props);
    const resource = useResourceContext(rest);
    const filters = useContext(FilterContext) || filtersProp;
    const { hasCreate } = useResourceDefinition(rest);
    return useMemo(
        () => (
            <TopToolbar className={className} {...sanitizeListRestProps(rest)}>
                {breadcrumb}
                {filtersProp
                    ? cloneElement(filtersProp, {
                          resource,
                          showFilter,
                          displayedFilters,
                          filterValues,
                          context: 'button',
                      })
                    : filters && <FilterButton />}
                {hasCreate && <CreateButton basePath={basePath} />}
                {exporter !== false && (
                    <ExportButton
                        disabled={total === 0}
                        resource={resource}
                        sort={currentSort}
                        filterValues={filterValues}
                    />
                )}
            </TopToolbar>
        ),
        [resource, displayedFilters, filterValues, selectedIds, filters, total] // eslint-disable-line react-hooks/exhaustive-deps
    );
};

ListActions.propTypes = {
    ...RaListActions.propTypes,
    breadcrumb: PropTypes.element,
};

ListActions.defaultProps = {
    breadcrumb: <Breadcrumb variant="actions" />,
    selectedIds: [],
    onUnselectItems: (): void => null,
};

export interface ListActionsProps extends RaListActionsProps {
    breadcrumb?: ReactElement<BreadcrumbProps>;
}
