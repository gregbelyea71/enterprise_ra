import * as React from 'react';
import { ReactElement } from 'react';
import PropTypes from 'prop-types';
import { ListActionsProps as RaListActionsProps } from 'react-admin';
import { BreadcrumbProps } from '@react-admin/ra-navigation';
export declare const ListActions: {
    (props: ListActionsProps): ReactElement;
    propTypes: {
        breadcrumb: PropTypes.Requireable<PropTypes.ReactElementLike>;
        currentSort?: React.Validator<import("react-admin").SortPayload>;
        className?: React.Validator<string>;
        resource?: React.Validator<string>;
        filters?: React.Validator<React.ReactElement<any, string | React.JSXElementConstructor<any>>>;
        displayedFilters?: React.Validator<any>;
        exporter?: React.Validator<boolean | import("react-admin").Exporter>;
        filterValues?: React.Validator<any>;
        permanentFilter?: React.Validator<any>;
        hasCreate?: React.Validator<boolean>;
        basePath?: React.Validator<string>;
        selectedIds?: React.Validator<import("react-admin").Identifier[]>;
        onUnselectItems?: React.Validator<() => void>;
        showFilter?: React.Validator<(filterName: string, defaultValue: any) => void>;
        total?: React.Validator<number>;
        disableGutters?: React.Validator<boolean>;
        variant?: React.Validator<"dense" | "regular">;
        style?: React.Validator<React.CSSProperties>;
        classes?: React.Validator<Partial<import("@material-ui/styles").ClassNameMap<import("@material-ui/core").ToolbarClassKey>>>;
        innerRef?: React.Validator<React.Ref<any>>;
        color?: React.Validator<string>;
        translate?: React.Validator<"no" | "yes">;
        hidden?: React.Validator<boolean>;
        title?: React.Validator<string>;
        children?: React.Validator<React.ReactNode>;
        ref?: React.Validator<React.Ref<HTMLDivElement>>;
        defaultChecked?: React.Validator<boolean>;
        defaultValue?: React.Validator<string | number | readonly string[]>;
        suppressContentEditableWarning?: React.Validator<boolean>;
        suppressHydrationWarning?: React.Validator<boolean>;
        accessKey?: React.Validator<string>;
        contentEditable?: React.Validator<"inherit" | (boolean | "false" | "true")>;
        contextMenu?: React.Validator<string>;
        dir?: React.Validator<string>;
        draggable?: React.Validator<boolean | "false" | "true">;
        id?: React.Validator<string>;
        lang?: React.Validator<string>;
        placeholder?: React.Validator<string>;
        slot?: React.Validator<string>;
        spellCheck?: React.Validator<boolean | "false" | "true">;
        tabIndex?: React.Validator<number>;
        radioGroup?: React.Validator<string>;
        role?: React.Validator<React.AriaRole>;
        about?: React.Validator<string>;
        datatype?: React.Validator<string>;
        inlist?: React.Validator<any>;
        prefix?: React.Validator<string>;
        property?: React.Validator<string>;
        typeof?: React.Validator<string>;
        vocab?: React.Validator<string>;
        autoCapitalize?: React.Validator<string>;
        autoCorrect?: React.Validator<string>;
        autoSave?: React.Validator<string>;
        itemProp?: React.Validator<string>;
        itemScope?: React.Validator<boolean>;
        itemType?: React.Validator<string>;
        itemID?: React.Validator<string>;
        itemRef?: React.Validator<string>;
        results?: React.Validator<number>;
        security?: React.Validator<string>;
        unselectable?: React.Validator<"on" | "off">;
        inputMode?: React.Validator<"none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal">;
        is?: React.Validator<string>;
        'aria-activedescendant'?: React.Validator<string>;
        'aria-atomic'?: React.Validator<boolean | "false" | "true">;
        'aria-autocomplete'?: React.Validator<"both" | "none" | "inline" | "list">;
        'aria-busy'?: React.Validator<boolean | "false" | "true">;
        'aria-checked'?: React.Validator<boolean | "mixed" | "false" | "true">;
        'aria-colcount'?: React.Validator<number>;
        'aria-colindex'?: React.Validator<number>;
        'aria-colspan'?: React.Validator<number>;
        'aria-controls'?: React.Validator<string>;
        'aria-current'?: React.Validator<boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date">;
        'aria-describedby'?: React.Validator<string>;
        'aria-details'?: React.Validator<string>;
        'aria-disabled'?: React.Validator<boolean | "false" | "true">;
        'aria-dropeffect'?: React.Validator<"link" | "none" | "copy" | "move" | "execute" | "popup">;
        'aria-errormessage'?: React.Validator<string>;
        'aria-expanded'?: React.Validator<boolean | "false" | "true">;
        'aria-flowto'?: React.Validator<string>;
        'aria-grabbed'?: React.Validator<boolean | "false" | "true">;
        'aria-haspopup'?: React.Validator<boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree">;
        'aria-hidden'?: React.Validator<boolean | "false" | "true">;
        'aria-invalid'?: React.Validator<boolean | "false" | "true" | "grammar" | "spelling">;
        'aria-keyshortcuts'?: React.Validator<string>;
        'aria-label'?: React.Validator<string>;
        'aria-labelledby'?: React.Validator<string>;
        'aria-level'?: React.Validator<number>;
        'aria-live'?: React.Validator<"off" | "assertive" | "polite">;
        'aria-modal'?: React.Validator<boolean | "false" | "true">;
        'aria-multiline'?: React.Validator<boolean | "false" | "true">;
        'aria-multiselectable'?: React.Validator<boolean | "false" | "true">;
        'aria-orientation'?: React.Validator<"horizontal" | "vertical">;
        'aria-owns'?: React.Validator<string>;
        'aria-placeholder'?: React.Validator<string>;
        'aria-posinset'?: React.Validator<number>;
        'aria-pressed'?: React.Validator<boolean | "mixed" | "false" | "true">;
        'aria-readonly'?: React.Validator<boolean | "false" | "true">;
        'aria-relevant'?: React.Validator<"all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals">;
        'aria-required'?: React.Validator<boolean | "false" | "true">;
        'aria-roledescription'?: React.Validator<string>;
        'aria-rowcount'?: React.Validator<number>;
        'aria-rowindex'?: React.Validator<number>;
        'aria-rowspan'?: React.Validator<number>;
        'aria-selected'?: React.Validator<boolean | "false" | "true">;
        'aria-setsize'?: React.Validator<number>;
        'aria-sort'?: React.Validator<"none" | "ascending" | "descending" | "other">;
        'aria-valuemax'?: React.Validator<number>;
        'aria-valuemin'?: React.Validator<number>;
        'aria-valuenow'?: React.Validator<number>;
        'aria-valuetext'?: React.Validator<string>;
        dangerouslySetInnerHTML?: React.Validator<{
            __html: string;
        }>;
        onCopy?: React.Validator<React.ClipboardEventHandler<HTMLDivElement>>;
        onCopyCapture?: React.Validator<React.ClipboardEventHandler<HTMLDivElement>>;
        onCut?: React.Validator<React.ClipboardEventHandler<HTMLDivElement>>;
        onCutCapture?: React.Validator<React.ClipboardEventHandler<HTMLDivElement>>;
        onPaste?: React.Validator<React.ClipboardEventHandler<HTMLDivElement>>;
        onPasteCapture?: React.Validator<React.ClipboardEventHandler<HTMLDivElement>>;
        onCompositionEnd?: React.Validator<React.CompositionEventHandler<HTMLDivElement>>;
        onCompositionEndCapture?: React.Validator<React.CompositionEventHandler<HTMLDivElement>>;
        onCompositionStart?: React.Validator<React.CompositionEventHandler<HTMLDivElement>>;
        onCompositionStartCapture?: React.Validator<React.CompositionEventHandler<HTMLDivElement>>;
        onCompositionUpdate?: React.Validator<React.CompositionEventHandler<HTMLDivElement>>;
        onCompositionUpdateCapture?: React.Validator<React.CompositionEventHandler<HTMLDivElement>>;
        onFocus?: React.Validator<React.FocusEventHandler<HTMLDivElement>>;
        onFocusCapture?: React.Validator<React.FocusEventHandler<HTMLDivElement>>;
        onBlur?: React.Validator<React.FocusEventHandler<HTMLDivElement>>;
        onBlurCapture?: React.Validator<React.FocusEventHandler<HTMLDivElement>>;
        onChange?: React.Validator<React.FormEventHandler<HTMLDivElement>>;
        onChangeCapture?: React.Validator<React.FormEventHandler<HTMLDivElement>>;
        onBeforeInput?: React.Validator<React.FormEventHandler<HTMLDivElement>>;
        onBeforeInputCapture?: React.Validator<React.FormEventHandler<HTMLDivElement>>;
        onInput?: React.Validator<React.FormEventHandler<HTMLDivElement>>;
        onInputCapture?: React.Validator<React.FormEventHandler<HTMLDivElement>>;
        onReset?: React.Validator<React.FormEventHandler<HTMLDivElement>>;
        onResetCapture?: React.Validator<React.FormEventHandler<HTMLDivElement>>;
        onSubmit?: React.Validator<React.FormEventHandler<HTMLDivElement>>;
        onSubmitCapture?: React.Validator<React.FormEventHandler<HTMLDivElement>>;
        onInvalid?: React.Validator<React.FormEventHandler<HTMLDivElement>>;
        onInvalidCapture?: React.Validator<React.FormEventHandler<HTMLDivElement>>;
        onLoad?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onLoadCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onError?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onErrorCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onKeyDown?: React.Validator<React.KeyboardEventHandler<HTMLDivElement>>;
        onKeyDownCapture?: React.Validator<React.KeyboardEventHandler<HTMLDivElement>>;
        onKeyPress?: React.Validator<React.KeyboardEventHandler<HTMLDivElement>>;
        onKeyPressCapture?: React.Validator<React.KeyboardEventHandler<HTMLDivElement>>;
        onKeyUp?: React.Validator<React.KeyboardEventHandler<HTMLDivElement>>;
        onKeyUpCapture?: React.Validator<React.KeyboardEventHandler<HTMLDivElement>>;
        onAbort?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onAbortCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onCanPlay?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onCanPlayCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onCanPlayThrough?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onCanPlayThroughCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onDurationChange?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onDurationChangeCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onEmptied?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onEmptiedCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onEncrypted?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onEncryptedCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onEnded?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onEndedCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onLoadedData?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onLoadedDataCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onLoadedMetadata?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onLoadedMetadataCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onLoadStart?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onLoadStartCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onPause?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onPauseCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onPlay?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onPlayCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onPlaying?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onPlayingCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onProgress?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onProgressCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onRateChange?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onRateChangeCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onSeeked?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onSeekedCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onSeeking?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onSeekingCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onStalled?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onStalledCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onSuspend?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onSuspendCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onTimeUpdate?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onTimeUpdateCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onVolumeChange?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onVolumeChangeCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onWaiting?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onWaitingCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onAuxClick?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onAuxClickCapture?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onClick?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onClickCapture?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onContextMenu?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onContextMenuCapture?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onDoubleClick?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onDoubleClickCapture?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onDrag?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onDragCapture?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onDragEnd?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onDragEndCapture?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onDragEnter?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onDragEnterCapture?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onDragExit?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onDragExitCapture?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onDragLeave?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onDragLeaveCapture?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onDragOver?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onDragOverCapture?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onDragStart?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onDragStartCapture?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onDrop?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onDropCapture?: React.Validator<React.DragEventHandler<HTMLDivElement>>;
        onMouseDown?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onMouseDownCapture?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onMouseEnter?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onMouseLeave?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onMouseMove?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onMouseMoveCapture?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onMouseOut?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onMouseOutCapture?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onMouseOver?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onMouseOverCapture?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onMouseUp?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onMouseUpCapture?: React.Validator<React.MouseEventHandler<HTMLDivElement>>;
        onSelect?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onSelectCapture?: React.Validator<React.ReactEventHandler<HTMLDivElement>>;
        onTouchCancel?: React.Validator<React.TouchEventHandler<HTMLDivElement>>;
        onTouchCancelCapture?: React.Validator<React.TouchEventHandler<HTMLDivElement>>;
        onTouchEnd?: React.Validator<React.TouchEventHandler<HTMLDivElement>>;
        onTouchEndCapture?: React.Validator<React.TouchEventHandler<HTMLDivElement>>;
        onTouchMove?: React.Validator<React.TouchEventHandler<HTMLDivElement>>;
        onTouchMoveCapture?: React.Validator<React.TouchEventHandler<HTMLDivElement>>;
        onTouchStart?: React.Validator<React.TouchEventHandler<HTMLDivElement>>;
        onTouchStartCapture?: React.Validator<React.TouchEventHandler<HTMLDivElement>>;
        onPointerDown?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onPointerDownCapture?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onPointerMove?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onPointerMoveCapture?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onPointerUp?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onPointerUpCapture?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onPointerCancel?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onPointerCancelCapture?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onPointerEnter?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onPointerEnterCapture?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onPointerLeave?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onPointerLeaveCapture?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onPointerOver?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onPointerOverCapture?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onPointerOut?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onPointerOutCapture?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onGotPointerCapture?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onGotPointerCaptureCapture?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onLostPointerCapture?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onLostPointerCaptureCapture?: React.Validator<React.PointerEventHandler<HTMLDivElement>>;
        onScroll?: React.Validator<React.UIEventHandler<HTMLDivElement>>;
        onScrollCapture?: React.Validator<React.UIEventHandler<HTMLDivElement>>;
        onWheel?: React.Validator<React.WheelEventHandler<HTMLDivElement>>;
        onWheelCapture?: React.Validator<React.WheelEventHandler<HTMLDivElement>>;
        onAnimationStart?: React.Validator<React.AnimationEventHandler<HTMLDivElement>>;
        onAnimationStartCapture?: React.Validator<React.AnimationEventHandler<HTMLDivElement>>;
        onAnimationEnd?: React.Validator<React.AnimationEventHandler<HTMLDivElement>>;
        onAnimationEndCapture?: React.Validator<React.AnimationEventHandler<HTMLDivElement>>;
        onAnimationIteration?: React.Validator<React.AnimationEventHandler<HTMLDivElement>>;
        onAnimationIterationCapture?: React.Validator<React.AnimationEventHandler<HTMLDivElement>>;
        onTransitionEnd?: React.Validator<React.TransitionEventHandler<HTMLDivElement>>;
        onTransitionEndCapture?: React.Validator<React.TransitionEventHandler<HTMLDivElement>>;
        key?: React.Validator<React.Key>;
    };
    defaultProps: {
        breadcrumb: JSX.Element;
        selectedIds: any[];
        onUnselectItems: () => void;
    };
};
export interface ListActionsProps extends RaListActionsProps {
    breadcrumb?: ReactElement<BreadcrumbProps>;
}
//# sourceMappingURL=ListActions.d.ts.map