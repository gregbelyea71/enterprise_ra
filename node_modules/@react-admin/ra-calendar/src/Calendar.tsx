import * as React from 'react';
import { useRef, useEffect, ComponentProps } from 'react';
import { useSelector } from 'react-redux';
import FullCalendar, {
    DatesSetArg,
    DateSelectArg,
    EventClickArg,
    EventChangeArg,
    EventInput,
} from '@fullcalendar/react';
import dayGridPlugin from '@fullcalendar/daygrid';
import timeGridPlugin from '@fullcalendar/timegrid';
import interactionPlugin from '@fullcalendar/interaction';
import {
    useListContext,
    linkToRecord,
    sanitizeListRestProps,
    useUpdate,
    useNotify,
    useRefresh,
    ReduxState,
} from 'react-admin';
import { makeStyles } from '@material-ui/core/styles';
import { useHistory } from 'react-router-dom';
import isEqual from 'lodash/isEqual';

import { getFilterValuesFromInterval as defaultGetFilterValuesFromInterval } from './getFilterValuesFromInterval';
import { convertToEvent as defaultConvertToEvent } from './convertToEvent';

/**
 * Calendar view, based on full-calendar's <FullCalendar> component
 *
 * Uses the react-admin Redux store as content provider, and links to the edit
 * and create views of the current resource.
 *
 * Must be used inside a `<ListContext>`. Prefereably use this component as a
 * child of `<List>`.
 *
 * Additional props are passed to `<FullCalendar>`.
 *
 * @example
 * ```
 * import { Calendar, getFilterValuesFromInterval } from '@react-admin/ra-calendar';
 * import { Admin, Resource, List, Edit, SimpleForm, TextInput, DateTimeInput } from 'react-admin';
 *
 * const EventList: FC<ComponentProps<typeof List>> = props => (
 *     <List
 *         {...props}
 *         filterDefaultValues={getFilterValuesFromInterval()}
 *         perPage={1000}
 *         pagination={false}
 *     >
 *         <Calendar />
 *     </List>
 * );
 *
 * const EventEdit: FC<ComponentProps<typeof Edit>> = props => (
 *     <Edit {...props}>
 *         <SimpleForm>
 *             <TextInput source="title" />
 *             <DateTimeInput source="start" />
 *             <DateTimeInput source="end" />
 *         </SimpleForm>
 *     </Edit>
 * );
 *
 * const EventCreate: FC<ComponentProps<typeof Create>> = props => (
 *     <Create {...props}>
 *         <SimpleForm>
 *             <TextInput source="title" />
 *             <DateTimeInput source="start" />
 *             <DateTimeInput source="end" />
 *         </SimpleForm>
 *     </Create>
 * );
 *
 * export const App: FC = () => (
 *     <Admin dataProvider={dataProvider}>
 *         <Resource
 *             name="events"
 *             list={EventList}
 *             edit={EventEdit}
 *             create={EventCreate}
 *         />
 *     </Admin>
 * );
 * ```
 */
export const Calendar = (props: CalendarProps): JSX.Element => {
    const {
        getFilterValueFromInterval = defaultGetFilterValuesFromInterval,
        convertToEvent = defaultConvertToEvent,
        ...rest
    } = props;
    const classes = useStyles(props);
    const notify = useNotify();
    const refresh = useRefresh();
    const history = useHistory();
    const {
        ids,
        data,
        basePath,
        filterValues,
        setFilters,
        displayedFilters,
        resource,
    } = useListContext();
    const [updateEvent] = useUpdate(resource, null);
    const calendar = useRef();

    // update size when sidebar changes
    const isFirstRender = useRef(true);
    useEffect(() => {
        isFirstRender.current = false;
    }, []);
    const sidebarIsOpen = useSelector(
        (state: ReduxState) => state.admin.ui.sidebarOpen
    );
    useEffect(() => {
        if (!isFirstRender.current) {
            setTimeout(() => {
                // @ts-ignore
                calendar.current?.getApi().updateSize();
            }, 300); // the max duration of the sidebar transition
        }
    }, [sidebarIsOpen]);

    const handleDatesSet = (dateInfo: DatesSetArg): void => {
        const newFilterValues = getFilterValueFromInterval(
            dateInfo,
            filterValues
        );
        if (!isEqual(filterValues, newFilterValues)) {
            setFilters(newFilterValues, displayedFilters);
        }
    };

    const handleDateSelect = (selectInfo: DateSelectArg): void => {
        const calendarApi = selectInfo.view.calendar;
        calendarApi.unselect(); // clear date selection
        history.push(`${basePath}/create`, {
            record: {
                start: selectInfo.startStr,
                end: selectInfo.endStr,
                allDay: selectInfo.allDay,
            },
        });
    };

    const handleEventClick = (clickInfo: EventClickArg): void => {
        history.push(linkToRecord(basePath, clickInfo.event.id));
    };

    const handleEventChange = (changeInfo: EventChangeArg): void => {
        updateEvent(
            {
                payload: {
                    id: changeInfo.event.id,
                    data: changeInfo.event.toPlainObject(),
                },
            },
            {
                onSuccess: () => {
                    notify(
                        'ra.notification.updated',
                        'info',
                        {
                            smart_count: 1,
                        },
                        true
                    );
                },
                onFailure: error => {
                    notify(
                        typeof error === 'string'
                            ? error
                            : error.message || 'ra.notification.http_error',
                        'warning'
                    );
                    refresh();
                },
                undoable: true,
            }
        );
    };

    return (
        <div className={classes.root}>
            <FullCalendar
                ref={calendar}
                plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}
                headerToolbar={{
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay',
                }}
                initialView="dayGridMonth"
                editable={true}
                selectable={true}
                selectMirror={true}
                dayMaxEvents={true}
                navLinks={true}
                datesSet={handleDatesSet}
                select={handleDateSelect}
                events={ids
                    .map(id => data[id])
                    .filter(event => typeof event !== 'undefined')
                    .map(convertToEvent)}
                eventClick={handleEventClick}
                eventChange={handleEventChange} // called for drag-n-drop/resize
                {...sanitizeListRestProps(rest)}
            />
        </div>
    );
};

const useStyles = makeStyles(
    theme => ({
        root: {
            padding: '1em',
            // material-ui skin for full calendar
            fontFamily: theme.typography.fontFamily,
            color: theme.palette.text.primary,
            '& .fc-toolbar-title': {
                fontSize: theme.typography.h5.fontSize,
                fontWeight: theme.typography.h5.fontWeight,
            },
            '& .fc-button': {
                backgroundColor: theme.palette.background.paper,
                color: theme.palette.action.active,
                borderColor: theme.palette.divider,
                fontSize: theme.typography.button.fontSize,
                fontWeight: theme.typography.button.fontWeight,
                textTransform: theme.typography.button.textTransform,
            },
            '& .fc-button-primary:disabled': {
                borderColor: theme.palette.divider,
                backgroundColor: theme.palette.action.selected,
                '&:hover': {
                    backgroundColor: theme.palette.action.hover,
                },
                color: theme.palette.action.active,
            },
            '& .fc-button-group .fc-button': {
                borderColor: theme.palette.divider,
                color: theme.palette.action.active,
            },
            '& .fc-button:hover': {
                borderColor: theme.palette.divider,
                backgroundColor: theme.palette.action.hover,
                color: theme.palette.text.primary,
            },
            '& .fc-button-primary:not(:disabled):active': {
                backgroundColor: theme.palette.action.active,
                color: theme.palette.text.primary,
            },
            '& .fc-button-group .fc-button-primary:not(:disabled):active': {
                borderColor: theme.palette.divider,
            },
            '& .fc-button-primary:not(:disabled).fc-button-active': {
                backgroundColor: theme.palette.action.selected,
                '&:hover': {
                    backgroundColor: theme.palette.action.hover,
                },
                color: theme.palette.action.active,
            },
            '& .fc-button-group .fc-button-primary:not(:disabled).fc-button-active': {
                borderColor: theme.palette.divider,
                color: theme.palette.text.secondary,
            },
            '& .fc-button-primary:not(:disabled):focus': {
                boxShadow: 'none',
            },
            '& .fc-button-primary:not(:disabled):active:focus': {
                boxShadow: 'none',
            },
            '& .fc-button-primary:not(:disabled).fc-button-active:focus': {
                boxShadow: 'none',
            },
            '& .fc-popover': {
                backgroundColor: theme.palette.background.paper,
            },
        },
    }),
    {
        name: 'RaCalendar',
    }
);

export interface CalendarProps extends ComponentProps<typeof FullCalendar> {
    getFilterValueFromInterval?: (
        dateInfo: DatesSetArg,
        filterValues: any
    ) => any;
    convertToEvent?: (event: any) => EventInput;
}
