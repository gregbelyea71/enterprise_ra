var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { add, sub, set } from 'date-fns';
/**
 * By default, return an interval of 3 months around now (1 month before, 2 months after)
 * unless the user requires a larger interval.
 *
 * This minimizes queries while navigating.
 */
export var getFilterValuesFromInterval = function (dateInfo, filterValues // eslint-disable-line @typescript-eslint/no-unused-vars
) {
    if (filterValues === void 0) { filterValues = {}; }
    var now = set(new Date(), {
        hours: 0,
        minutes: 0,
        seconds: 0,
        milliseconds: 0,
    });
    var nowMinus1Month = sub(now, { months: 1 });
    var nowPlus2Months = add(now, { months: 2 });
    return !dateInfo ||
        (dateInfo.start > nowMinus1Month && dateInfo.end < nowPlus2Months)
        ? __assign(__assign({}, filterValues), { start_gte: nowMinus1Month.toISOString(), start_lte: nowPlus2Months.toISOString() }) : __assign(__assign({}, filterValues), { start_gte: dateInfo.startStr, start_lte: dateInfo.endStr });
};
