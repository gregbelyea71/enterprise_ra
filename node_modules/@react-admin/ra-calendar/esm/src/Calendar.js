var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { useRef, useEffect } from 'react';
import { useSelector } from 'react-redux';
import FullCalendar from '@fullcalendar/react';
import dayGridPlugin from '@fullcalendar/daygrid';
import timeGridPlugin from '@fullcalendar/timegrid';
import interactionPlugin from '@fullcalendar/interaction';
import { useListContext, linkToRecord, sanitizeListRestProps, useUpdate, useNotify, useRefresh, } from 'react-admin';
import { makeStyles } from '@material-ui/core/styles';
import { useHistory } from 'react-router-dom';
import isEqual from 'lodash/isEqual';
import { getFilterValuesFromInterval as defaultGetFilterValuesFromInterval } from './getFilterValuesFromInterval';
import { convertToEvent as defaultConvertToEvent } from './convertToEvent';
/**
 * Calendar view, based on full-calendar's <FullCalendar> component
 *
 * Uses the react-admin Redux store as content provider, and links to the edit
 * and create views of the current resource.
 *
 * Must be used inside a `<ListContext>`. Prefereably use this component as a
 * child of `<List>`.
 *
 * Additional props are passed to `<FullCalendar>`.
 *
 * @example
 * ```
 * import { Calendar, getFilterValuesFromInterval } from '@react-admin/ra-calendar';
 * import { Admin, Resource, List, Edit, SimpleForm, TextInput, DateTimeInput } from 'react-admin';
 *
 * const EventList: FC<ComponentProps<typeof List>> = props => (
 *     <List
 *         {...props}
 *         filterDefaultValues={getFilterValuesFromInterval()}
 *         perPage={1000}
 *         pagination={false}
 *     >
 *         <Calendar />
 *     </List>
 * );
 *
 * const EventEdit: FC<ComponentProps<typeof Edit>> = props => (
 *     <Edit {...props}>
 *         <SimpleForm>
 *             <TextInput source="title" />
 *             <DateTimeInput source="start" />
 *             <DateTimeInput source="end" />
 *         </SimpleForm>
 *     </Edit>
 * );
 *
 * const EventCreate: FC<ComponentProps<typeof Create>> = props => (
 *     <Create {...props}>
 *         <SimpleForm>
 *             <TextInput source="title" />
 *             <DateTimeInput source="start" />
 *             <DateTimeInput source="end" />
 *         </SimpleForm>
 *     </Create>
 * );
 *
 * export const App: FC = () => (
 *     <Admin dataProvider={dataProvider}>
 *         <Resource
 *             name="events"
 *             list={EventList}
 *             edit={EventEdit}
 *             create={EventCreate}
 *         />
 *     </Admin>
 * );
 * ```
 */
export var Calendar = function (props) {
    var _a = props.getFilterValueFromInterval, getFilterValueFromInterval = _a === void 0 ? defaultGetFilterValuesFromInterval : _a, _b = props.convertToEvent, convertToEvent = _b === void 0 ? defaultConvertToEvent : _b, rest = __rest(props, ["getFilterValueFromInterval", "convertToEvent"]);
    var classes = useStyles(props);
    var notify = useNotify();
    var refresh = useRefresh();
    var history = useHistory();
    var _c = useListContext(), ids = _c.ids, data = _c.data, basePath = _c.basePath, filterValues = _c.filterValues, setFilters = _c.setFilters, displayedFilters = _c.displayedFilters, resource = _c.resource;
    var updateEvent = useUpdate(resource, null)[0];
    var calendar = useRef();
    // update size when sidebar changes
    var isFirstRender = useRef(true);
    useEffect(function () {
        isFirstRender.current = false;
    }, []);
    var sidebarIsOpen = useSelector(function (state) { return state.admin.ui.sidebarOpen; });
    useEffect(function () {
        if (!isFirstRender.current) {
            setTimeout(function () {
                var _a;
                // @ts-ignore
                (_a = calendar.current) === null || _a === void 0 ? void 0 : _a.getApi().updateSize();
            }, 300); // the max duration of the sidebar transition
        }
    }, [sidebarIsOpen]);
    var handleDatesSet = function (dateInfo) {
        var newFilterValues = getFilterValueFromInterval(dateInfo, filterValues);
        if (!isEqual(filterValues, newFilterValues)) {
            setFilters(newFilterValues, displayedFilters);
        }
    };
    var handleDateSelect = function (selectInfo) {
        var calendarApi = selectInfo.view.calendar;
        calendarApi.unselect(); // clear date selection
        history.push(basePath + "/create", {
            record: {
                start: selectInfo.startStr,
                end: selectInfo.endStr,
                allDay: selectInfo.allDay,
            },
        });
    };
    var handleEventClick = function (clickInfo) {
        history.push(linkToRecord(basePath, clickInfo.event.id));
    };
    var handleEventChange = function (changeInfo) {
        updateEvent({
            payload: {
                id: changeInfo.event.id,
                data: changeInfo.event.toPlainObject(),
            },
        }, {
            onSuccess: function () {
                notify('ra.notification.updated', 'info', {
                    smart_count: 1,
                }, true);
            },
            onFailure: function (error) {
                notify(typeof error === 'string'
                    ? error
                    : error.message || 'ra.notification.http_error', 'warning');
                refresh();
            },
            undoable: true,
        });
    };
    return (React.createElement("div", { className: classes.root },
        React.createElement(FullCalendar, __assign({ ref: calendar, plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin], headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay',
            }, initialView: "dayGridMonth", editable: true, selectable: true, selectMirror: true, dayMaxEvents: true, navLinks: true, datesSet: handleDatesSet, select: handleDateSelect, events: ids
                .map(function (id) { return data[id]; })
                .filter(function (event) { return typeof event !== 'undefined'; })
                .map(convertToEvent), eventClick: handleEventClick, eventChange: handleEventChange }, sanitizeListRestProps(rest)))));
};
var useStyles = makeStyles(function (theme) { return ({
    root: {
        padding: '1em',
        // material-ui skin for full calendar
        fontFamily: theme.typography.fontFamily,
        color: theme.palette.text.primary,
        '& .fc-toolbar-title': {
            fontSize: theme.typography.h5.fontSize,
            fontWeight: theme.typography.h5.fontWeight,
        },
        '& .fc-button': {
            backgroundColor: theme.palette.background.paper,
            color: theme.palette.action.active,
            borderColor: theme.palette.divider,
            fontSize: theme.typography.button.fontSize,
            fontWeight: theme.typography.button.fontWeight,
            textTransform: theme.typography.button.textTransform,
        },
        '& .fc-button-primary:disabled': {
            borderColor: theme.palette.divider,
            backgroundColor: theme.palette.action.selected,
            '&:hover': {
                backgroundColor: theme.palette.action.hover,
            },
            color: theme.palette.action.active,
        },
        '& .fc-button-group .fc-button': {
            borderColor: theme.palette.divider,
            color: theme.palette.action.active,
        },
        '& .fc-button:hover': {
            borderColor: theme.palette.divider,
            backgroundColor: theme.palette.action.hover,
            color: theme.palette.text.primary,
        },
        '& .fc-button-primary:not(:disabled):active': {
            backgroundColor: theme.palette.action.active,
            color: theme.palette.text.primary,
        },
        '& .fc-button-group .fc-button-primary:not(:disabled):active': {
            borderColor: theme.palette.divider,
        },
        '& .fc-button-primary:not(:disabled).fc-button-active': {
            backgroundColor: theme.palette.action.selected,
            '&:hover': {
                backgroundColor: theme.palette.action.hover,
            },
            color: theme.palette.action.active,
        },
        '& .fc-button-group .fc-button-primary:not(:disabled).fc-button-active': {
            borderColor: theme.palette.divider,
            color: theme.palette.text.secondary,
        },
        '& .fc-button-primary:not(:disabled):focus': {
            boxShadow: 'none',
        },
        '& .fc-button-primary:not(:disabled):active:focus': {
            boxShadow: 'none',
        },
        '& .fc-button-primary:not(:disabled).fc-button-active:focus': {
            boxShadow: 'none',
        },
        '& .fc-popover': {
            backgroundColor: theme.palette.background.paper,
        },
    },
}); }, {
    name: 'RaCalendar',
});
