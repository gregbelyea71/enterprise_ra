var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { Admin, Resource, List, Edit, Create, SimpleForm, TextInput, DateTimeInput, } from 'react-admin';
import { createMemoryHistory } from 'history';
import { createMuiTheme } from '@material-ui/core/styles';
import allLocales from '@fullcalendar/core/locales-all';
import { Calendar, getFilterValuesFromInterval, getNavigatorLanguage, } from '../src';
import dataProvider from './dataProvider';
export default { title: 'ra-calendar/Calendar' };
var EventList = function (props) { return (React.createElement(List, __assign({}, props, { filterDefaultValues: getFilterValuesFromInterval(), perPage: 1000, pagination: false }),
    React.createElement(Calendar, null))); };
var EventEdit = function (props) { return (React.createElement(Edit, __assign({}, props),
    React.createElement(SimpleForm, null,
        React.createElement(TextInput, { source: "title" }),
        React.createElement(DateTimeInput, { source: "start" }),
        React.createElement(DateTimeInput, { source: "end" })))); };
var EventCreate = function (props) { return (React.createElement(Create, __assign({}, props),
    React.createElement(SimpleForm, null,
        React.createElement(TextInput, { source: "title" }),
        React.createElement(DateTimeInput, { source: "start" }),
        React.createElement(DateTimeInput, { source: "end" })))); };
export var Basic = function () { return (React.createElement(Admin, { history: createMemoryHistory(), dataProvider: dataProvider },
    React.createElement(Resource, { name: "events", list: EventList, edit: EventEdit, create: EventCreate }))); };
export var DarkTheme = function () { return (React.createElement(Admin, { history: createMemoryHistory(), dataProvider: dataProvider, theme: createMuiTheme({
        palette: {
            type: 'dark',
        },
    }) },
    React.createElement(Resource, { name: "events", list: EventList, edit: EventEdit, create: EventCreate }))); };
var EventListWithCustomContent = function (props) { return (React.createElement(List, __assign({}, props, { filterDefaultValues: getFilterValuesFromInterval(), perPage: 1000, pagination: false }),
    React.createElement(Calendar, { eventContent: function (eventContent) { return (React.createElement(React.Fragment, null,
            React.createElement("b", null, eventContent.timeText),
            ' ',
            React.createElement("i", null, eventContent.event.title))); } }))); };
export var CustomContent = function () { return (React.createElement(Admin, { history: createMemoryHistory(), dataProvider: dataProvider },
    React.createElement(Resource, { name: "events", list: EventListWithCustomContent, edit: EventEdit, create: EventCreate }))); };
var EventListWithCustomLocale = function (props) { return (React.createElement(List, __assign({}, props, { filterDefaultValues: getFilterValuesFromInterval(), perPage: 1000, pagination: false }),
    React.createElement(Calendar, { locales: allLocales, locale: getNavigatorLanguage() }))); };
export var CustomLocale = function () { return (React.createElement(Admin, { history: createMemoryHistory(), dataProvider: dataProvider },
    React.createElement(Resource, { name: "events", list: EventListWithCustomLocale, edit: EventEdit, create: EventCreate }))); };
import dummyDataProvider from './dummyDataProvider';
var EventListWithConvertToEvent = function (props) { return (React.createElement(List, __assign({}, props, { filterDefaultValues: getFilterValuesFromInterval(), perPage: 1000, pagination: false }),
    React.createElement(Calendar, { convertToEvent: function (event) { return ({
            id: String(event.id),
            title: event.name,
            start: event.begin,
            end: event.finish,
            allDay: event.allDay,
        }); }, getFilterValueFromInterval: function (dateInfo) { return ({
            begin_gte: dateInfo.startStr,
            begin_lte: dateInfo.endStr,
        }); }, initialView: "dayGridWeek" }))); };
export var ConvertToEvent = function () { return (React.createElement(Admin, { history: createMemoryHistory(), dataProvider: dummyDataProvider },
    React.createElement(Resource, { name: "events", list: EventListWithConvertToEvent, edit: EventEdit, create: EventCreate }))); };
