import { ComponentProps } from 'react';
import FullCalendar, { DatesSetArg, EventInput } from '@fullcalendar/react';
/**
 * Calendar view, based on full-calendar's <FullCalendar> component
 *
 * Uses the react-admin Redux store as content provider, and links to the edit
 * and create views of the current resource.
 *
 * Must be used inside a `<ListContext>`. Prefereably use this component as a
 * child of `<List>`.
 *
 * Additional props are passed to `<FullCalendar>`.
 *
 * @example
 * ```
 * import { Calendar, getFilterValuesFromInterval } from '@react-admin/ra-calendar';
 * import { Admin, Resource, List, Edit, SimpleForm, TextInput, DateTimeInput } from 'react-admin';
 *
 * const EventList: FC<ComponentProps<typeof List>> = props => (
 *     <List
 *         {...props}
 *         filterDefaultValues={getFilterValuesFromInterval()}
 *         perPage={1000}
 *         pagination={false}
 *     >
 *         <Calendar />
 *     </List>
 * );
 *
 * const EventEdit: FC<ComponentProps<typeof Edit>> = props => (
 *     <Edit {...props}>
 *         <SimpleForm>
 *             <TextInput source="title" />
 *             <DateTimeInput source="start" />
 *             <DateTimeInput source="end" />
 *         </SimpleForm>
 *     </Edit>
 * );
 *
 * const EventCreate: FC<ComponentProps<typeof Create>> = props => (
 *     <Create {...props}>
 *         <SimpleForm>
 *             <TextInput source="title" />
 *             <DateTimeInput source="start" />
 *             <DateTimeInput source="end" />
 *         </SimpleForm>
 *     </Create>
 * );
 *
 * export const App: FC = () => (
 *     <Admin dataProvider={dataProvider}>
 *         <Resource
 *             name="events"
 *             list={EventList}
 *             edit={EventEdit}
 *             create={EventCreate}
 *         />
 *     </Admin>
 * );
 * ```
 */
export declare const Calendar: (props: CalendarProps) => JSX.Element;
export interface CalendarProps extends ComponentProps<typeof FullCalendar> {
    getFilterValueFromInterval?: (dateInfo: DatesSetArg, filterValues: any) => any;
    convertToEvent?: (event: any) => EventInput;
}
//# sourceMappingURL=Calendar.d.ts.map