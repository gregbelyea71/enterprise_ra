import React, { Fragment, ReactElement } from 'react';
import PropTypes from 'prop-types';
import { IconButton, Tooltip } from '@material-ui/core';
import ActionDelete from '@material-ui/icons/Delete';
import classnames from 'classnames';
import inflection from 'inflection';
import {
    Confirm,
    getMutationMode,
    MutationMode,
    Record,
    RedirectionSideEffect,
    useDeleteWithConfirmController,
    useRecordContext,
    useResourceContext,
    useTranslate,
} from 'react-admin';

export const DeleteWithConfirmIconButton = (
    props: DeleteWithConfirmIconButtonProps
) => {
    const {
        basePath,
        className,
        confirmTitle = 'ra.message.delete_title',
        confirmContent = 'ra.message.delete_content',
        label = 'ra.action.delete',
        mutationMode,
        redirect: redirectTo = 'list',
        undoable,
    } = props;
    const mode = getMutationMode(mutationMode, undoable);
    const record = useRecordContext(props);
    const resource = useResourceContext(props);

    const { open, loading, handleDialogOpen, handleDialogClose, handleDelete } =
        useDeleteWithConfirmController({
            mutationMode: mutationMode || mode,
            resource,
            record,
            redirect: redirectTo,
            basePath,
        });
    const translate = useTranslate();
    const translatedLabel = translate(label, { _: label });

    return (
        <Fragment>
            <Tooltip title={translatedLabel}>
                <IconButton
                    aria-label={translatedLabel}
                    onClick={handleDialogOpen}
                    className={classnames('ra-delete-button', className)}
                    key="button"
                    size="small"
                >
                    <ActionDelete color="error" />
                </IconButton>
            </Tooltip>
            <Confirm
                isOpen={open}
                loading={loading}
                title={confirmTitle}
                content={confirmContent}
                translateOptions={{
                    name: inflection.humanize(
                        translate(`resources.${resource}.name`, {
                            smart_count: 1,
                            _: inflection.singularize(resource),
                        }),
                        true
                    ),
                    id: record ? record.id : undefined,
                }}
                onConfirm={handleDelete}
                onClose={handleDialogClose}
            />
        </Fragment>
    );
};

export type DeleteWithConfirmIconButtonProps = {
    basePath?: string;
    className?: string;
    confirmTitle?: string;
    confirmContent?: string;
    icon?: ReactElement;
    label?: string;
    mutationMode?: MutationMode;
    onClick?: (e: MouseEvent) => void;
    record?: Record;
    redirect?: RedirectionSideEffect;
    resource?: string;
    invalid?: boolean;
    pristine?: boolean;
    saving?: boolean;
    submitOnEnter?: boolean;
    /** @deprecated use mutationMode: undoable instead */
    undoable?: boolean;
};

DeleteWithConfirmIconButton.propTypes = {
    basePath: PropTypes.string,
    className: PropTypes.string,
    confirmTitle: PropTypes.string,
    confirmContent: PropTypes.string,
    label: PropTypes.string,
    record: PropTypes.any,
    redirect: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.bool,
        PropTypes.func,
    ]),
    resource: PropTypes.string,
    icon: PropTypes.element,
};
