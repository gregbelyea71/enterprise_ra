var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import * as React from 'react';
import { Fragment } from 'react';
import PropTypes from 'prop-types';
import { Toolbar as MuiToolbar } from '@material-ui/core';
import { makeStyles, useTheme } from '@material-ui/core/styles';
import useMediaQuery from '@material-ui/core/useMediaQuery';
import classnames from 'classnames';
import { DeleteButton, SaveButton } from 'react-admin';
import { usePermissions } from '../usePermissions';
import { canAccess } from '../canAccess';
var useStyles = makeStyles(function (theme) {
    var _a;
    return ({
        toolbar: {
            backgroundColor: theme.palette.type === 'light'
                ? theme.palette.grey[100]
                : theme.palette.grey[900],
        },
        desktopToolbar: {
            marginTop: theme.spacing(2),
        },
        mobileToolbar: {
            position: 'fixed',
            bottom: 0,
            left: 0,
            right: 0,
            padding: '16px',
            width: '100%',
            boxSizing: 'border-box',
            flexShrink: 0,
            zIndex: 2,
        },
        defaultToolbar: {
            flex: 1,
            display: 'flex',
            justifyContent: 'space-between',
        },
        spacer: (_a = {},
            _a[theme.breakpoints.down('xs')] = {
                height: '5em',
            },
            _a),
    });
}, { name: 'RaToolbar' });
var valueOrDefault = function (value, defaultValue) {
    return typeof value === 'undefined' ? defaultValue : value;
};
/**
 * Replacement for react-admin's Toolbar that adds RBAC control to actions
 *
 * Users must have the 'delete' permission on the resource and record to see the DeleteButton.
 */
export var Toolbar = function (props) {
    var _a;
    var alwaysEnableSaveButton = props.alwaysEnableSaveButton, basePath = props.basePath, children = props.children, className = props.className, classesOverride = props.classes, handleSubmit = props.handleSubmit, handleSubmitWithRedirect = props.handleSubmitWithRedirect, invalid = props.invalid, pristine = props.pristine, record = props.record, redirect = props.redirect, resource = props.resource, saving = props.saving, submitOnEnter = props.submitOnEnter, undoable = props.undoable, mutationMode = props.mutationMode, validating = props.validating, rest = __rest(props, ["alwaysEnableSaveButton", "basePath", "children", "className", "classes", "handleSubmit", "handleSubmitWithRedirect", "invalid", "pristine", "record", "redirect", "resource", "saving", "submitOnEnter", "undoable", "mutationMode", "validating"]);
    var width = useWidth();
    var classes = useStyles(props);
    var _b = usePermissions(), loading = _b.loading, permissions = _b.permissions;
    if (loading) {
        return null;
    }
    // Use form pristine and validating to enable or disable the save button
    // if alwaysEnableSaveButton is undefined
    var disabled = !valueOrDefault(alwaysEnableSaveButton, !pristine && !validating);
    return (React.createElement(Fragment, null,
        React.createElement(MuiToolbar, __assign({ className: classnames(classes.toolbar, (_a = {},
                _a[classes.mobileToolbar] = width === 'xs',
                _a[classes.desktopToolbar] = width !== 'xs',
                _a), className), role: "toolbar" }, rest),
            React.createElement("div", { className: classes.defaultToolbar },
                React.createElement(SaveButton, { handleSubmitWithRedirect: handleSubmitWithRedirect || handleSubmit, disabled: disabled, invalid: invalid, redirect: redirect, saving: saving || validating, submitOnEnter: submitOnEnter }),
                record &&
                    typeof record.id !== 'undefined' &&
                    canAccess({
                        permissions: permissions,
                        action: 'delete',
                        resource: resource,
                        record: record,
                    }) && (React.createElement(DeleteButton, { basePath: basePath, record: record, resource: resource, undoable: undoable, mutationMode: mutationMode })))),
        React.createElement("div", { className: classes.spacer })));
};
Toolbar.propTypes = {
    basePath: PropTypes.string,
    children: PropTypes.node,
    classes: PropTypes.object,
    className: PropTypes.string,
    handleSubmit: PropTypes.func,
    handleSubmitWithRedirect: PropTypes.func,
    invalid: PropTypes.bool,
    pristine: PropTypes.bool,
    record: PropTypes.any,
    redirect: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.bool,
        PropTypes.func,
    ]),
    resource: PropTypes.string,
    saving: PropTypes.bool,
    submitOnEnter: PropTypes.bool,
    undoable: PropTypes.bool,
    validating: PropTypes.bool,
};
Toolbar.defaultProps = {
    submitOnEnter: true,
};
function useWidth() {
    var theme = useTheme();
    var keys = __spreadArray([], theme.breakpoints.keys).reverse();
    return (keys.reduce(function (output, key) {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        var matches = useMediaQuery(theme.breakpoints.up(key));
        return !output && matches ? key : output;
    }, null) || 'xs');
}
