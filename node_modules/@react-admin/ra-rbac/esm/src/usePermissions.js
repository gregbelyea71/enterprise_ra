var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import { useEffect } from 'react';
import { useAuthProvider, useSafeSetState } from 'react-admin';
/**
 * Get permissions from the authProvider
 *
 * Permissions are undefined on mount, and then set to
 * the merge of the roles and permissions from the authProvider.
 *
 * Use it instead of react-admin's usePermissions.
 *
 * @example
 * const { loaded, permissions } = usePermissions();
 * // {
 * //      loaded: true,
 * //      permissions: [
 * //          { "action": ["read"], "resource": "correctors" },
 * //          { "action": ["write"], "resource": "correctors", "record": { "id": "123" } },
 * //      ],
 * // };
 */
export var usePermissions = function () {
    var authProvider = useAuthProvider();
    var _a = useSafeSetState(), permissions = _a[0], setPermissions = _a[1];
    var _b = useSafeSetState(false), loaded = _b[0], setLoaded = _b[1];
    useEffect(function () {
        authProvider
            .getPermissions(emptyParams)
            .then(function (raPermissions) {
            if (raPermissions && raPermissions.roles) {
                authProvider.getRoles().then(function (roles) {
                    var userRoles = Object.keys(roles).filter(function (role) {
                        return raPermissions.roles.includes(role);
                    });
                    var permissionsFromRoles = userRoles.reduce(function (acc, role) { return acc.concat(roles[role]); }, []);
                    setPermissions(raPermissions.permissions
                        ? __spreadArray(__spreadArray([], permissionsFromRoles), raPermissions.permissions) : permissionsFromRoles);
                    setLoaded(true);
                });
            }
            else {
                setPermissions(raPermissions ? raPermissions.permissions : []);
                setLoaded(true);
            }
        });
    }, [authProvider]); // eslint-disable-line react-hooks/exhaustive-deps
    return {
        permissions: permissions,
        loaded: loaded,
        loading: !loaded,
    };
};
var emptyParams = {};
