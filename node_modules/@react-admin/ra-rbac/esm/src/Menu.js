var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import PropTypes from 'prop-types';
import { shallowEqual, useSelector } from 'react-redux';
import lodashGet from 'lodash/get';
import { makeStyles } from '@material-ui/core/styles';
import DefaultIcon from '@material-ui/icons/ViewList';
import classnames from 'classnames';
import { useGetResourceLabel, getResources, DashboardMenuItem, MenuItemLink, } from 'react-admin';
import { usePermissions } from './usePermissions';
import { canAccess } from './canAccess';
export var MENU_WIDTH = 240;
export var CLOSED_MENU_WIDTH = 55;
/**
 * A replacement for react-admin's `<Menu>` component, which only displays
 * the menu items that the current user has access to (using the `list` action).
 *
 * Pass this menu to a `<Layout>`, and pass that layout to the `<Admin>` component to use it.
 *
 * @example
 * import { Admin, Resource, ListGuesser, Layout, LayoutProps } from 'react-admin';
 * import { Menu } from '@react-admin/ra-rbac';
 *
 * import * as posts from './posts';
 * import * as comments from './comments';
 * import * as users from './users';
 *
 * const authProvider= {
 *     // ...
 *     getPermissions: () => Promise.resolve([
 *         { "action": "*", "resource": "posts" },
 *         { "action": "*", "resource": "comments" },
 *     ]),
 * };
 *
 * const CustomLayout = (props: LayoutProps) => <Layout {...props} menu={Menu} />;
 *
 * const App = () => (
 *     <Admin dataProvider={...} authProvider={...} layout={CustomLayout}>
 *         <Resource name="posts" {...posts} />
 *         <Resource name="comments" {...comments} />
 *         <Resource name="users" {...users} />
 *     </Admin>
 * ); // the user won't see the Users menu
 */
export var Menu = function (props) {
    var _a;
    var classesOverride = props.classes, className = props.className, dense = props.dense, hasDashboard = props.hasDashboard, onMenuClick = props.onMenuClick, logout = props.logout, rest = __rest(props, ["classes", "className", "dense", "hasDashboard", "onMenuClick", "logout"]);
    var classes = useStyles(props);
    var open = useSelector(function (state) { return state.admin.ui.sidebarOpen; });
    var resources = useSelector(getResources, shallowEqual);
    var getResourceLabel = useGetResourceLabel();
    var _b = usePermissions(), loading = _b.loading, permissions = _b.permissions;
    if (loading) {
        return null;
    }
    return (React.createElement("div", __assign({ className: classnames(classes.main, (_a = {},
            _a[classes.open] = open,
            _a[classes.closed] = !open,
            _a), className) }, rest),
        hasDashboard && React.createElement(DashboardMenuItem, { dense: dense }),
        resources
            .filter(function (r) { return r.hasList; })
            .filter(function (r) {
            return canAccess({ permissions: permissions, resource: r.name, action: 'list' });
        })
            .map(function (resource) { return (React.createElement(MenuItemLink, { key: resource.name, to: {
                pathname: "/" + resource.name,
                state: { _scrollToTop: true },
            }, primaryText: getResourceLabel(resource.name, 2), leftIcon: resource.icon ? React.createElement(resource.icon, null) : React.createElement(DefaultIcon, null), dense: dense })); })));
};
Menu.propTypes = {
    classes: PropTypes.object,
    className: PropTypes.string,
    dense: PropTypes.bool,
    hasDashboard: PropTypes.bool,
    logout: PropTypes.element,
    onMenuClick: PropTypes.func,
};
Menu.defaultProps = {
    onMenuClick: function () { return null; },
};
var useStyles = makeStyles(function (theme) {
    var _a;
    return ({
        main: (_a = {
                display: 'flex',
                flexDirection: 'column',
                justifyContent: 'flex-start',
                marginTop: '0.5em'
            },
            _a[theme.breakpoints.only('xs')] = {
                marginTop: 0,
            },
            _a[theme.breakpoints.up('md')] = {
                marginTop: '1.5em',
            },
            _a),
        open: {
            width: lodashGet(theme, 'menu.width', MENU_WIDTH),
        },
        closed: {
            width: lodashGet(theme, 'menu.closedWidth', CLOSED_MENU_WIDTH),
        },
    });
}, { name: 'RaMenu' });
