var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { useEffect, useMemo, createElement } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Route, Switch } from 'react-router-dom';
import { registerResource, unregisterResource, ResourceContextProvider, } from 'react-admin';
import omit from 'lodash/omit';
import { usePermissions } from './usePermissions';
import { canAccess } from './canAccess';
import { useAuthenticated } from './useAuthenticated';
var defaultOptions = {};
var ResourceRegister = function (_a) {
    var name = _a.name, list = _a.list, create = _a.create, edit = _a.edit, show = _a.show, icon = _a.icon, _b = _a.options, options = _b === void 0 ? defaultOptions : _b;
    var dispatch = useDispatch();
    useEffect(function () {
        dispatch(registerResource({
            name: name,
            options: options,
            hasList: !!list,
            hasEdit: !!edit,
            hasShow: !!show,
            hasCreate: !!create,
            icon: icon,
        }));
        return function () {
            dispatch(unregisterResource(name));
        };
    }, [dispatch, name, create, edit, icon, list, show, options]);
    return null;
};
var ResourceRoutes = function (_a) {
    var name = _a.name, match = _a.match, list = _a.list, create = _a.create, edit = _a.edit, show = _a.show, _b = _a.options, options = _b === void 0 ? defaultOptions : _b;
    var isRegistered = useSelector(function (state) { return !!state.admin.resources[name]; });
    var authChecked = useAuthenticated().loaded;
    var _c = usePermissions(), permissionsLoaded = _c.loaded, permissions = _c.permissions;
    var basePath = match ? match.path : '';
    var resourceData = useMemo(function () { return ({
        resource: name,
        options: options,
        hasList: !!list,
        hasEdit: !!edit,
        hasShow: !!show,
        hasCreate: !!create,
    }); }, [name, options, create, edit, list, show]);
    // match tends to change even on the same route ; using memo to avoid an extra render
    return useMemo(function () {
        // if the registration hasn't finished, no need to render
        if (!isRegistered) {
            return null;
        }
        // if the authProvider hasn't returned, no need to render
        if (!authChecked || !permissionsLoaded) {
            return null;
        }
        return (React.createElement(ResourceContextProvider, { value: name },
            React.createElement(Switch, null,
                create &&
                    canAccess({
                        permissions: permissions,
                        action: 'create',
                        resource: name,
                    }) && (React.createElement(Route, { path: basePath + "/create", render: function (routeProps) {
                        return createElement(create, __assign(__assign({ basePath: basePath, permissions: permissions }, omit(routeProps, 'staticContext')), resourceData));
                    } })),
                show &&
                    canAccess({
                        permissions: permissions,
                        action: 'show',
                        resource: name,
                    }) && (React.createElement(Route, { path: basePath + "/:id/show", render: function (routeProps) {
                        return createElement(show, __assign(__assign({ basePath: basePath, id: decodeURIComponent(routeProps.match
                                .params.id), permissions: permissions }, omit(routeProps, 'staticContext')), resourceData));
                    } })),
                edit &&
                    canAccess({
                        permissions: permissions,
                        action: 'edit',
                        resource: name,
                    }) && (React.createElement(Route, { path: basePath + "/:id", render: function (routeProps) {
                        return createElement(edit, __assign(__assign({ basePath: basePath, id: decodeURIComponent(routeProps.match
                                .params.id), permissions: permissions }, omit(routeProps, 'staticContext')), resourceData));
                    } })),
                list &&
                    canAccess({
                        permissions: permissions,
                        action: 'list',
                        resource: name,
                    }) && (React.createElement(Route, { path: "" + basePath, render: function (routeProps) {
                        return createElement(list, __assign(__assign({ basePath: basePath, permissions: permissions, 
                            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                            // @ts-ignore
                            syncWithLocation: true }, omit(routeProps, 'staticContext')), resourceData));
                    } })))));
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        basePath,
        name,
        create,
        edit,
        list,
        show,
        options,
        isRegistered,
        authChecked,
        permissionsLoaded,
    ]);
};
export var Resource = function (_a) {
    var _b = _a.intent, intent = _b === void 0 ? 'route' : _b, props = __rest(_a, ["intent"]);
    return intent === 'registration' ? (React.createElement(ResourceRegister, __assign({}, props))) : (React.createElement(ResourceRoutes, __assign({}, props)));
};
