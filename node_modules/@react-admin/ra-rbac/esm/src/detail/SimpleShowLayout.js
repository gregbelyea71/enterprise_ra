var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { Children, isValidElement } from 'react';
import { SimpleShowLayout as RaSimpleShowLayout, useResourceContext, } from 'react-admin';
import { usePermissions } from '../usePermissions';
import { canAccess } from '../canAccess';
/**
 * Alternative to react-admin's <SimpleShowLayout> that adds RBAC control to fields
 *
 * To see a column, the user must have the permission to read the resource column:
 * { "action": "read", "resource": `${resource}.${source}` }
 *
 * @example
 * import { SimpleShowLayout } from '@react-admin/ra-rbac';
 *
 * const authProvider= {
 *     // ...
 *     getPermissions: () => Promise.resolve([
 *         { action: ['list', 'show'], resource: 'products' },
 *         { action: 'read', resource: 'products.reference' },
 *         { action: 'read', resource: 'products.width' },
 *         { action: 'read', resource: 'products.height' },
 *         // 'products.description' is missing
 *         // 'products.image' is missing
 *         { action: 'read', resource: 'products.thumbnail' },
 *         // 'products.stock' is missing
 *     ]),
 * };
 *
 * const ProductShow = props => (
 *     <Show {...props}>
 *         <SimpleShowLayout> // <-- RBAC SimpleShowLayout
 *             <TextField source="reference" />
 *             <TextField source="width" />
 *             <TextField source="height" />
 *             // not displayed
 *             <TextField source="description" />
 *             // not displayed
 *             <TextField source="image" />
 *             <TextField source="thumbnail" />
 *             // not displayed
 *             <TextField source="stock" />
 *         </SimpleShowLayout>
 *     </Show>
 * );
 */
export var SimpleShowLayout = function (props) {
    var resource = useResourceContext();
    var children = props.children, rest = __rest(props, ["children"]);
    var _a = usePermissions(), loading = _a.loading, permissions = _a.permissions;
    if (loading)
        return null;
    return (React.createElement(RaSimpleShowLayout, __assign({}, rest), Children.map(children, function (child) {
        return isValidElement(child) &&
            canAccess({
                permissions: permissions,
                action: 'read',
                resource: resource + "." + child.props.source,
            })
            ? child
            : null;
    })));
};
SimpleShowLayout.propTypes = RaSimpleShowLayout.propTypes;
