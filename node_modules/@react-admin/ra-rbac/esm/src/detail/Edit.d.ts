import { ReactElement } from 'react';
import { EditProps } from 'react-admin';
/**
 * Replacement for react-admin's Edit that adds RBAC control to actions
 *
 * Users must have the 'show' permission on the resource and record to see the ShowButton.
 * Users must have the 'clone' permission on the resource and record to see the CloneButton.
 *
 * @example
 * import { Edit } from '@react-admin/ra-rbac';
 *
 * const authProvider = {
 *      // ...
 *      getPermissions: () => Promise.resolve({
 *           permissions: [
 *                 { action: ['list', 'edit', 'clone'], resource: 'products' },
 *           ],
 *       }),
 * };
 *
 * export const PostEdit = (props) => (
 *     <Edit {...props}>
 *         ...
 *     </Edit>
 * );
 * // user will see the clone button but not the show button
 */
export declare const Edit: {
    (props: EditProps & {
        children: ReactElement;
    }): JSX.Element;
    propTypes: {
        actions: import("prop-types").Requireable<boolean | import("prop-types").ReactElementLike>;
        aside: import("prop-types").Requireable<import("prop-types").ReactElementLike>;
        children: import("prop-types").Requireable<import("prop-types").ReactNodeLike>;
        classes: import("prop-types").Requireable<object>;
        className: import("prop-types").Requireable<string>;
        hasCreate: import("prop-types").Requireable<boolean>;
        hasEdit: import("prop-types").Requireable<boolean>;
        hasShow: import("prop-types").Requireable<boolean>;
        hasList: import("prop-types").Requireable<boolean>;
        id: import("prop-types").Validator<any>;
        mutationMode: import("prop-types").Requireable<string>;
        onSuccess: import("prop-types").Requireable<(...args: any[]) => any>;
        onFailure: import("prop-types").Requireable<(...args: any[]) => any>;
        resource: import("prop-types").Requireable<string>;
        successMessage: import("prop-types").Requireable<string>;
        title: import("prop-types").Requireable<import("prop-types").ReactNodeLike>;
        transform: import("prop-types").Requireable<(...args: any[]) => any>;
        undoable: import("prop-types").Requireable<boolean>;
    };
};
//# sourceMappingURL=Edit.d.ts.map