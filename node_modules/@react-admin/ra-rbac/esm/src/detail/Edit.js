var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { Edit as RaEdit } from 'react-admin';
import { EditActions } from './EditActions';
/**
 * Replacement for react-admin's Edit that adds RBAC control to actions
 *
 * Users must have the 'show' permission on the resource and record to see the ShowButton.
 * Users must have the 'clone' permission on the resource and record to see the CloneButton.
 *
 * @example
 * import { Edit } from '@react-admin/ra-rbac';
 *
 * const authProvider = {
 *      // ...
 *      getPermissions: () => Promise.resolve({
 *           permissions: [
 *                 { action: ['list', 'edit', 'clone'], resource: 'products' },
 *           ],
 *       }),
 * };
 *
 * export const PostEdit = (props) => (
 *     <Edit {...props}>
 *         ...
 *     </Edit>
 * );
 * // user will see the clone button but not the show button
 */
export var Edit = function (props) {
    return React.createElement(RaEdit, __assign({ actions: React.createElement(EditActions, null) }, props));
};
Edit.propTypes = RaEdit.propTypes;
