var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { EditButton, ShowActions as RaShowActions, TopToolbar, useResourceContext, useResourceDefinition, useShowContext, } from 'react-admin';
import { usePermissions } from '../usePermissions';
import { canAccess } from '../canAccess';
/**
 * Replacement for react-admin's ShowAction that adds RBAC control to actions
 *
 * Users must have the 'edit' permission on the resource and record to see the EditButton.
 *
 * @example
 * import { Show } from 'react-admin';
 * import { ShowActions } from '@react-admin/ra-rbac';
 *
 * export const PostShow = (props) => (
 *     <Show actions={<ShowActions />} {...props}>
 *         ...
 *     </Show>
 * );
 */
export var ShowActions = function (props) {
    var className = props.className;
    var _a = useShowContext(props), basePath = _a.basePath, record = _a.record, rest = __rest(_a, ["basePath", "record"]);
    var hasEdit = useResourceDefinition(props).hasEdit;
    var resource = useResourceContext(props);
    var _b = usePermissions(), loaded = _b.loaded, permissions = _b.permissions;
    return (loaded && (React.createElement(TopToolbar, __assign({ className: className }, sanitizeRestProps(rest)), hasEdit &&
        canAccess({
            permissions: permissions,
            action: 'edit',
            resource: resource,
            record: record,
        }) && React.createElement(EditButton, { basePath: basePath, record: record }))));
};
ShowActions.propTypes = RaShowActions.propTypes;
var sanitizeRestProps = function (_a) {
    var basePath = _a.basePath, defaultTitle = _a.defaultTitle, className = _a.className, hasCreate = _a.hasCreate, hasEdit = _a.hasEdit, hasList = _a.hasList, hasShow = _a.hasShow, loaded = _a.loaded, loading = _a.loading, refetch = _a.refetch, resource = _a.resource, rest = __rest(_a, ["basePath", "defaultTitle", "className", "hasCreate", "hasEdit", "hasList", "hasShow", "loaded", "loading", "refetch", "resource"]);
    return rest;
};
