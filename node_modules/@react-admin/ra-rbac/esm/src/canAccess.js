import isMatch from 'lodash/isMatch';
/**
 * Checks if an array of permissions allows to execute the given action on the given resource.
 *
 * @example
 * canAccess({
 *     permissions: [
 *         { resource: 'user', action: 'read' },
 *         { resource: 'posts', action: ['read', 'edit', 'create', 'delete'] },
 *     ],
 *     action: "edit",
 *     resource: "posts"
 * }); // true
 */
export var canAccess = function (_a) {
    var permissions = _a.permissions, action = _a.action, resource = _a.resource, record = _a.record;
    // if one deny permission matches, return false
    for (var _i = 0, _b = permissions.filter(function (p) { return p.type === 'deny'; }); _i < _b.length; _i++) {
        var permission = _b[_i];
        if (matchTarget(permission, resource, action, record)) {
            return false;
        }
    }
    // if one allow permission matches, return true
    for (var _c = 0, _d = permissions.filter(function (p) { return p.type !== 'deny'; }); _c < _d.length; _c++) {
        var permission = _d[_c];
        if (matchTarget(permission, resource, action, record)) {
            return true;
        }
    }
    return false;
};
/**
 * Checks is a permission matches a target (action, resource, record)
 *
 * @example
 * matchTarget({ resource: 'user', action: 'read' }, 'user', 'read'); // true
 * matchTarget({ resource: 'user', action: 'read' }, 'user', 'edit'); // false
 */
var matchTarget = function (permission, resource, action, record) {
    if (!matchWildcard(permission.resource, resource)) {
        return false;
    }
    if (Array.isArray(permission.action) &&
        !permission.action.includes(action)) {
        return false;
    }
    if (typeof permission.action === 'string' &&
        permission.action !== '*' &&
        permission.action !== action) {
        return false;
    }
    if (permission.record) {
        if (!record || !isMatch(record, permission.record)) {
            return false;
        }
    }
    return true;
};
/**
 * Checks if a permission matches a wildcard.
 *
 * @param permission The permission to check, e.g. 'posts.*'
 * @param resource The resource to check, e.g. 'posts'
 *
 * @example
 * matchWildCard('*', 'posts'); // true
 * matchWildCard('posts', 'posts'); // true
 * matchWildcard('posts.*', 'posts'); // true
 * matchWildcard('comments', 'posts'); // false
 */
var matchWildcard = function (pattern, resource) {
    if (pattern === '*') {
        return true;
    }
    if (pattern === resource) {
        return true;
    }
    if (pattern.endsWith('*')) {
        return resource.startsWith(pattern.slice(0, -1));
    }
    return false;
};
