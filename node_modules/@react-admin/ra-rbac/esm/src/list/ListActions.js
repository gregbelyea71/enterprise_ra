var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { cloneElement, useMemo, useContext } from 'react';
import { CreateButton, ExportButton, FilterButton, FilterContext, ListActions as RaListActions, sanitizeListRestProps, TopToolbar, useListContext, useResourceContext, useResourceDefinition, } from 'react-admin';
import { usePermissions } from '../usePermissions';
import { canAccess } from '../canAccess';
/**
 * Replacement for react-admin's ListAction that adds RBAC control to actions
 *
 * Users must have the 'create' permission on the resource to see the CreateButton.
 * Users must have the 'export' permission on the resource to see the ExportButton.
 *
 * @example
 * import { List } from 'react-admin';
 * import { ListActions } from '@react-admin/ra-rbac';
 *
 * export const PostList = (props) => (
 *     <List actions={<ListActions />} {...props}>
 *         ...
 *     </List>
 * );
 */
export var ListActions = function (props) {
    var className = props.className, exporter = props.exporter, filtersProp = props.filters, rest = __rest(props, ["className", "exporter", "filters"]);
    var _a = useListContext(props), currentSort = _a.currentSort, displayedFilters = _a.displayedFilters, filterValues = _a.filterValues, basePath = _a.basePath, selectedIds = _a.selectedIds, showFilter = _a.showFilter, total = _a.total;
    var resource = useResourceContext(rest);
    var hasCreate = useResourceDefinition(rest).hasCreate;
    var filters = useContext(FilterContext) || filtersProp;
    var _b = usePermissions(), loaded = _b.loaded, permissions = _b.permissions;
    return useMemo(function () {
        return loaded && (React.createElement(TopToolbar, __assign({ className: className }, sanitizeListRestProps(rest)),
            filtersProp
                ? cloneElement(filtersProp, {
                    resource: resource,
                    showFilter: showFilter,
                    displayedFilters: displayedFilters,
                    filterValues: filterValues,
                    context: 'button',
                })
                : filters && React.createElement(FilterButton, null),
            hasCreate &&
                canAccess({
                    action: 'create',
                    resource: resource,
                    permissions: permissions,
                }) && React.createElement(CreateButton, { basePath: basePath }),
            exporter !== false &&
                canAccess({
                    action: 'export',
                    resource: resource,
                    permissions: permissions,
                }) && React.createElement(CreateButton, { basePath: basePath }) && (React.createElement(ExportButton, { disabled: total === 0, resource: resource, sort: currentSort, filterValues: filterValues }))));
    }, 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
        resource,
        displayedFilters,
        filterValues,
        selectedIds,
        filters,
        total,
        loaded,
    ]);
};
ListActions.propTypes = RaListActions.propTypes;
ListActions.defaultProps = RaListActions.defaultProps;
