import { ReactElement } from 'react';
import { ListProps } from 'react-admin';
/**
 * Replacement for react-admin's List that adds RBAC control to actions and bulk actions
 *
 * Users must have the 'create' permission on the resource to see the CreateButton.
 * Users must have the 'export' permission on the resource to see the ExportButton and the BulkExportButton.
 * Users must have the 'delete' permission on the resource to see the BulkExportButton.
 *
 * @example
 * import { List } from '@react-admin/ra-rbac';
 *
 * const authProvider = {
 *      // ...
 *      getPermissions: () => Promise.resolve({
 *           permissions: [
 *                 { action: 'list', resource: 'products' },
 *                 { action: 'create', resource: 'products' },
 *                 { action: 'delete', resource: 'products' },
 *                 // action 'export' is missing
 *           ],
 *       }),
 * };
 *
 * export const PostList = (props) => (
 *     <List {...props}>
 *         ...
 *     </List>
 * );
 * // user will see the following actions on top of the list:
 * // - create
 * // user will see the following bulk actions upon selection:
 * // - delete
 */
export declare const List: {
    (props: ListProps & {
        children: ReactElement;
    }): JSX.Element;
    propTypes: {
        actions: import("prop-types").Requireable<boolean | import("prop-types").ReactElementLike>;
        aside: import("prop-types").Requireable<import("prop-types").ReactElementLike>;
        bulkActionButtons: import("prop-types").Requireable<boolean | import("prop-types").ReactElementLike>;
        children: import("prop-types").Requireable<import("prop-types").ReactElementLike>;
        classes: import("prop-types").Requireable<object>;
        className: import("prop-types").Requireable<string>;
        filter: import("prop-types").Requireable<object>;
        filterDefaultValues: import("prop-types").Requireable<object>;
        filters: import("prop-types").Requireable<import("prop-types").ReactElementLike | import("prop-types").ReactElementLike[]>;
        pagination: import("prop-types").Requireable<boolean | import("prop-types").ReactElementLike>;
        perPage: import("prop-types").Validator<number>;
        sort: import("prop-types").Requireable<import("prop-types").InferProps<{
            field: import("prop-types").Requireable<string>;
            order: import("prop-types").Requireable<string>;
        }>>;
        title: import("prop-types").Requireable<string | import("prop-types").ReactElementLike>;
        authProvider: import("prop-types").Requireable<(...args: any[]) => any>;
        hasCreate: import("prop-types").Requireable<boolean>;
        hasEdit: import("prop-types").Requireable<boolean>;
        hasList: import("prop-types").Requireable<boolean>;
        hasShow: import("prop-types").Requireable<boolean>;
        location: import("prop-types").Requireable<any>;
        match: import("prop-types").Requireable<any>;
        path: import("prop-types").Requireable<string>;
        resource: import("prop-types").Requireable<string>;
        syncWithLocation: import("prop-types").Requireable<boolean>;
    };
    defaultProps: {
        filter: {};
        perPage: number;
    };
};
//# sourceMappingURL=List.d.ts.map