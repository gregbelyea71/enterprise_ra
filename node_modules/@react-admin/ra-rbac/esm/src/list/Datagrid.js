var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { Children, isValidElement } from 'react';
import { Datagrid as RaDatagrid, useResourceContext, } from 'react-admin';
import { usePermissions } from '../usePermissions';
import { canAccess } from '../canAccess';
/**
 * Alternative to react-admin's <Datagrid> that adds RBAC control to columns
 *
 * To see a column, the user must have the permission to read the resource column:
 * { "action": "read", "resource": `${resource}.${source}` }
 *
 * Also, the rowClick prop is automatically set depending on the user props:
 * - "edit" if the user has the permission to edit the resource
 * - "show" if the user doesn't have the permission to edit the resource but has the permission to show it
 * - empty otherwise
 *
 * @example
 * import { Datagrid } from '@react-admin/ra-rbac';
 *
 * const authProvider= {
 *     // ...
 *     getPermissions: () => Promise.resolve([
 *         { action: "list", resource: "products" },
 *         { action: "read", resource: "products.thumbnail" },
 *         { action: "read", resource: "products.reference" },
 *         { action: "read", resource: "products.category_id" },
 *         { action: "read", resource: "products.width" },
 *         { action: "read", resource: "products.height" },
 *         { action: "read", resource: "products.price" },
 *         { action: "read", resource: "products.description" },
 *     ]),
 * };
 *
 * const ProductList = props => (
 *     <List {...props}>
 *         <Datagrid rowClick="edit"> // <-- RBAC Datagrid
 *             <ImageField source="thumbnail" />
 *             <TextField source="reference" />
 *             <ReferenceField source="category_id" reference="categories">
 *                 <TextField source="name" />
 *             </ReferenceField>
 *             <NumberField source="width" />
 *             <NumberField source="height" />
 *             <NumberField source="price" />
 *             <TextField source="description" />
 *             {
 *                // these two columns are not visible to the user
 *             }
 *             <NumberField source="stock" />
 *             <NumberField source="sales" />
 *         </Datagrid>
 *     </List>
 * );
 */
export var Datagrid = function (props) {
    var resource = useResourceContext();
    var children = props.children, rest = __rest(props, ["children"]);
    var _a = usePermissions(), loading = _a.loading, permissions = _a.permissions;
    if (loading)
        return null;
    var defaultRowClick = canAccess({ permissions: permissions, resource: resource, action: 'edit' })
        ? 'edit'
        : canAccess({ permissions: permissions, resource: resource, action: 'show' })
            ? 'show'
            : '';
    return (React.createElement(RaDatagrid, __assign({ rowClick: defaultRowClick }, rest), Children.map(children, function (child) {
        return isValidElement(child) &&
            canAccess({
                permissions: permissions,
                action: 'read',
                resource: resource + "." + child.props.source,
            })
            ? child
            : null;
    })));
};
