var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { Admin, Resource, ListGuesser, Layout } from 'react-admin';
import fakeRestDataProvider from 'ra-data-fakerest';
import generateData from 'data-generator-retail';
import { Menu } from '../src';
export default { title: 'ra-rbac/Menu' };
var data = generateData();
var dataProvider = fakeRestDataProvider(data, true);
var authProvider = {
    checkAuth: function () { return Promise.resolve(); },
    login: function () { return Promise.resolve(); },
    logout: function () { return Promise.resolve(); },
    checkError: function () { return Promise.resolve(); },
    getPermissions: function () {
        return promiseFor({
            permissions: [
                { action: 'list', resource: 'products' },
                { action: 'list', resource: 'categories' },
                { action: '*', resource: 'commands' },
                { action: ['list', 'edit'], resource: 'customers' },
            ],
        });
    },
};
var CustomLayout = function (props) { return React.createElement(Layout, __assign({}, props, { menu: Menu })); };
export var Basic = function () { return (React.createElement(Admin, { authProvider: authProvider, dataProvider: dataProvider, layout: CustomLayout },
    React.createElement(Resource, { name: "products", list: ListGuesser }),
    React.createElement(Resource, { name: "categories", list: ListGuesser }),
    React.createElement(Resource, { name: "commands", list: ListGuesser }),
    React.createElement(Resource, { name: "customers", list: ListGuesser }),
    React.createElement(Resource, { name: "reviews", list: ListGuesser }))); };
var promiseFor = function (result) {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve(result);
        }, 300);
    });
};
