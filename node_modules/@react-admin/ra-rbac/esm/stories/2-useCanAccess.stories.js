var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { AuthContext } from 'react-admin';
import { useCanAccess } from '../src';
export default { title: 'ra-rbac/useCanAccess' };
var authProvider = {
    checkAuth: function () { return Promise.resolve(); },
    login: function () { return Promise.resolve(); },
    logout: function () { return Promise.resolve(); },
    checkError: function () { return Promise.resolve(); },
    getPermissions: function () { return Promise.resolve(); },
    getRoles: function () { return Promise.resolve(); },
};
var PostRead = function () {
    var _a = useCanAccess({
        action: 'read',
        resource: 'posts',
    }), loading = _a.loading, canAccess = _a.canAccess;
    if (loading) {
        return React.createElement("span", null, "Loading");
    }
    return canAccess ? React.createElement("span", null, "Allowed") : React.createElement("span", null, "Restricted");
};
var PostWrite = function () {
    var _a = useCanAccess({
        action: 'write',
        resource: 'posts',
    }), loading = _a.loading, canAccess = _a.canAccess;
    if (loading) {
        return React.createElement("span", null, "Loading");
    }
    return canAccess ? React.createElement("span", null, "Allowed") : React.createElement("span", null, "Restricted");
};
var CommentRead = function () {
    var _a = useCanAccess({
        action: 'read',
        resource: 'comments',
    }), loading = _a.loading, canAccess = _a.canAccess;
    if (loading) {
        return React.createElement("span", null, "Loading");
    }
    return canAccess ? React.createElement("span", null, "Allowed") : React.createElement("span", null, "Restricted");
};
var App = function () { return (React.createElement("ul", null,
    React.createElement("li", null,
        "Read posts: ",
        React.createElement(PostRead, null)),
    React.createElement("li", null,
        "Write posts: ",
        React.createElement(PostWrite, null)),
    React.createElement("li", null,
        "Read comments: ",
        React.createElement(CommentRead, null)))); };
export var Basic = function () { return (React.createElement(AuthContext.Provider, { value: __assign(__assign({}, authProvider), { getPermissions: function () {
            return promiseFor({
                permissions: [{ action: 'read', resource: 'posts' }],
                roles: ['commentReader'],
            });
        }, getRoles: function () {
            return promiseFor({
                commentReader: [{ action: 'read', resource: 'comments' }],
            });
        } }) },
    React.createElement(App, null))); };
export var NoAccess = function () { return (React.createElement(AuthContext.Provider, { value: __assign(__assign({}, authProvider), { getPermissions: function () { return promiseFor({ permissions: [] }); } }) },
    React.createElement(App, null))); };
export var AdminAccess = function () { return (React.createElement(AuthContext.Provider, { value: __assign(__assign({}, authProvider), { getPermissions: function () {
            return promiseFor({ permissions: [{ action: '*', resource: '*' }] });
        } }) },
    React.createElement(App, null))); };
var promiseFor = function (result) {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve(result);
        }, 200);
    });
};
