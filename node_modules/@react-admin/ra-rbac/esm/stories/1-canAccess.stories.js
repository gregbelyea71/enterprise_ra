var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Admin, List, Datagrid, TextField } from 'react-admin';
import fakeRestDataProvider from 'ra-data-fakerest';
import generateData from 'data-generator-retail';
import { canAccess, Resource } from '../src';
export default { title: 'ra-rbac/canAccess' };
var data = generateData();
var dataProvider = fakeRestDataProvider(data, true);
var authProvider = {
    checkAuth: function () { return Promise.resolve(); },
    login: function () { return Promise.resolve(); },
    logout: function () { return Promise.resolve(); },
    checkError: function () { return Promise.resolve(); },
    getPermissions: function () {
        return promiseFor({
            permissions: [
                { action: 'list', resource: 'products' },
                { action: 'read', resource: 'products.price' },
            ],
        });
    },
};
var ProductList = function (_a) {
    var permissions = _a.permissions, props = __rest(_a, ["permissions"]);
    return (React.createElement(List, __assign({}, props),
        React.createElement(Datagrid, null,
            React.createElement(TextField, { source: "id" }),
            React.createElement(TextField, { source: "reference" }),
            React.createElement(TextField, { source: "width" }),
            React.createElement(TextField, { source: "height" }),
            canAccess({
                permissions: permissions,
                action: 'read',
                resource: 'products.price',
            }) && React.createElement(TextField, { source: "price" }),
            canAccess({
                permissions: permissions,
                action: 'read',
                resource: 'products.stock',
            }) && React.createElement(TextField, { source: "stock" }))));
};
export var DatagridColumns = function () { return (React.createElement(Admin, { authProvider: authProvider, dataProvider: dataProvider },
    React.createElement(Resource, { name: "products", list: ProductList }),
    React.createElement(Resource, { name: "categories" }))); };
var promiseFor = function (result) {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve(result);
        }, 300);
    });
};
