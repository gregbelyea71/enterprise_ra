import * as React from 'react';
import { Fragment } from 'react';
import PropTypes from 'prop-types';
import { Toolbar as MuiToolbar } from '@material-ui/core';
import { makeStyles, Theme, useTheme } from '@material-ui/core/styles';
import useMediaQuery from '@material-ui/core/useMediaQuery';
import { Breakpoint } from '@material-ui/core/styles/createBreakpoints';
import classnames from 'classnames';
import { ToolbarProps, DeleteButton, SaveButton } from 'react-admin';

import { usePermissions } from '../usePermissions';
import { canAccess } from '../canAccess';

const useStyles = makeStyles(
    theme => ({
        toolbar: {
            backgroundColor:
                theme.palette.type === 'light'
                    ? theme.palette.grey[100]
                    : theme.palette.grey[900],
        },
        desktopToolbar: {
            marginTop: theme.spacing(2),
        },
        mobileToolbar: {
            position: 'fixed',
            bottom: 0,
            left: 0,
            right: 0,
            padding: '16px',
            width: '100%',
            boxSizing: 'border-box',
            flexShrink: 0,
            zIndex: 2,
        },
        defaultToolbar: {
            flex: 1,
            display: 'flex',
            justifyContent: 'space-between',
        },
        spacer: {
            [theme.breakpoints.down('xs')]: {
                height: '5em',
            },
        },
    }),
    { name: 'RaToolbar' }
);

const valueOrDefault = (value, defaultValue) =>
    typeof value === 'undefined' ? defaultValue : value;

/**
 * Replacement for react-admin's Toolbar that adds RBAC control to actions
 *
 * Users must have the 'delete' permission on the resource and record to see the DeleteButton.
 */
export const Toolbar = (props: ToolbarProps) => {
    const {
        alwaysEnableSaveButton,
        basePath,
        children,
        className,
        classes: classesOverride,
        handleSubmit,
        handleSubmitWithRedirect,
        invalid,
        pristine,
        record,
        redirect,
        resource,
        saving,
        submitOnEnter,
        undoable,
        mutationMode,
        validating,
        ...rest
    } = props;
    const width = useWidth();
    const classes = useStyles(props);
    const { loading, permissions } = usePermissions();
    if (loading) {
        return null;
    }

    // Use form pristine and validating to enable or disable the save button
    // if alwaysEnableSaveButton is undefined
    const disabled = !valueOrDefault(
        alwaysEnableSaveButton,
        !pristine && !validating
    );

    return (
        <Fragment>
            <MuiToolbar
                className={classnames(
                    classes.toolbar,
                    {
                        [classes.mobileToolbar]: width === 'xs',
                        [classes.desktopToolbar]: width !== 'xs',
                    },
                    className
                )}
                role="toolbar"
                {...rest}
            >
                <div className={classes.defaultToolbar}>
                    <SaveButton
                        handleSubmitWithRedirect={
                            handleSubmitWithRedirect || handleSubmit
                        }
                        disabled={disabled}
                        invalid={invalid}
                        redirect={redirect}
                        saving={saving || validating}
                        submitOnEnter={submitOnEnter}
                    />
                    {record &&
                        typeof record.id !== 'undefined' &&
                        canAccess({
                            permissions,
                            action: 'delete',
                            resource,
                            record,
                        }) && (
                            <DeleteButton
                                basePath={basePath}
                                record={record}
                                resource={resource}
                                undoable={undoable}
                                mutationMode={mutationMode}
                            />
                        )}
                </div>
            </MuiToolbar>
            <div className={classes.spacer} />
        </Fragment>
    );
};

Toolbar.propTypes = {
    basePath: PropTypes.string,
    children: PropTypes.node,
    classes: PropTypes.object,
    className: PropTypes.string,
    handleSubmit: PropTypes.func,
    handleSubmitWithRedirect: PropTypes.func,
    invalid: PropTypes.bool,
    pristine: PropTypes.bool,
    record: PropTypes.any,
    redirect: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.bool,
        PropTypes.func,
    ]),
    resource: PropTypes.string,
    saving: PropTypes.bool,
    submitOnEnter: PropTypes.bool,
    undoable: PropTypes.bool,
    validating: PropTypes.bool,
};

Toolbar.defaultProps = {
    submitOnEnter: true,
};

function useWidth(): Breakpoint {
    const theme: Theme = useTheme();
    const keys: Breakpoint[] = [...theme.breakpoints.keys].reverse();
    return (
        keys.reduce((output: Breakpoint | null, key: Breakpoint) => {
            // eslint-disable-next-line react-hooks/rules-of-hooks
            const matches = useMediaQuery(theme.breakpoints.up(key));
            return !output && matches ? key : output;
        }, null) || 'xs'
    );
}
