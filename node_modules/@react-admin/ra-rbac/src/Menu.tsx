import * as React from 'react';
import PropTypes from 'prop-types';
import { shallowEqual, useSelector } from 'react-redux';
import lodashGet from 'lodash/get';
import { makeStyles } from '@material-ui/core/styles';
import DefaultIcon from '@material-ui/icons/ViewList';
import classnames from 'classnames';
import {
    useGetResourceLabel,
    getResources,
    ReduxState,
    DashboardMenuItem,
    MenuItemLink,
    MenuProps,
} from 'react-admin';

import { usePermissions } from './usePermissions';
import { canAccess } from './canAccess';

export const MENU_WIDTH = 240;
export const CLOSED_MENU_WIDTH = 55;

/**
 * A replacement for react-admin's `<Menu>` component, which only displays
 * the menu items that the current user has access to (using the `list` action).
 *
 * Pass this menu to a `<Layout>`, and pass that layout to the `<Admin>` component to use it.
 *
 * @example
 * import { Admin, Resource, ListGuesser, Layout, LayoutProps } from 'react-admin';
 * import { Menu } from '@react-admin/ra-rbac';
 *
 * import * as posts from './posts';
 * import * as comments from './comments';
 * import * as users from './users';
 *
 * const authProvider= {
 *     // ...
 *     getPermissions: () => Promise.resolve([
 *         { "action": "*", "resource": "posts" },
 *         { "action": "*", "resource": "comments" },
 *     ]),
 * };
 *
 * const CustomLayout = (props: LayoutProps) => <Layout {...props} menu={Menu} />;
 *
 * const App = () => (
 *     <Admin dataProvider={...} authProvider={...} layout={CustomLayout}>
 *         <Resource name="posts" {...posts} />
 *         <Resource name="comments" {...comments} />
 *         <Resource name="users" {...users} />
 *     </Admin>
 * ); // the user won't see the Users menu
 */
export const Menu = (props: MenuProps) => {
    const {
        classes: classesOverride,
        className,
        dense,
        hasDashboard,
        onMenuClick,
        logout,
        ...rest
    } = props;
    const classes = useStyles(props);
    const open = useSelector((state: ReduxState) => state.admin.ui.sidebarOpen);
    const resources = useSelector(getResources, shallowEqual) as Array<any>;
    const getResourceLabel = useGetResourceLabel();
    const { loading, permissions } = usePermissions();

    if (loading) {
        return null;
    }
    return (
        <div
            className={classnames(
                classes.main,
                {
                    [classes.open]: open,
                    [classes.closed]: !open,
                },
                className
            )}
            {...rest}
        >
            {hasDashboard && <DashboardMenuItem dense={dense} />}
            {resources
                .filter(r => r.hasList)
                .filter(r =>
                    canAccess({ permissions, resource: r.name, action: 'list' })
                )
                .map(resource => (
                    <MenuItemLink
                        key={resource.name}
                        to={{
                            pathname: `/${resource.name}`,
                            state: { _scrollToTop: true },
                        }}
                        primaryText={getResourceLabel(resource.name, 2)}
                        leftIcon={
                            resource.icon ? <resource.icon /> : <DefaultIcon />
                        }
                        dense={dense}
                    />
                ))}
        </div>
    );
};

Menu.propTypes = {
    classes: PropTypes.object,
    className: PropTypes.string,
    dense: PropTypes.bool,
    hasDashboard: PropTypes.bool,
    logout: PropTypes.element,
    onMenuClick: PropTypes.func,
};

Menu.defaultProps = {
    onMenuClick: () => null,
};

const useStyles = makeStyles(
    theme => ({
        main: {
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'flex-start',
            marginTop: '0.5em',
            [theme.breakpoints.only('xs')]: {
                marginTop: 0,
            },
            [theme.breakpoints.up('md')]: {
                marginTop: '1.5em',
            },
        },
        open: {
            width: lodashGet(theme, 'menu.width', MENU_WIDTH),
        },
        closed: {
            width: lodashGet(theme, 'menu.closedWidth', CLOSED_MENU_WIDTH),
        },
    }),
    { name: 'RaMenu' }
);
