import * as React from 'react';
import { FunctionComponent, useEffect, useMemo, createElement } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Route, Switch } from 'react-router-dom';
import {
    registerResource,
    unregisterResource,
    ResourceProps,
    ResourceMatch,
    ReduxState,
    ResourceContextProvider,
} from 'react-admin';
import omit from 'lodash/omit';

import { usePermissions } from './usePermissions';
import { canAccess } from './canAccess';
import { useAuthenticated } from './useAuthenticated';

const defaultOptions = {};

const ResourceRegister: FunctionComponent<ResourceProps> = ({
    name,
    list,
    create,
    edit,
    show,
    icon,
    options = defaultOptions,
}) => {
    const dispatch = useDispatch();
    useEffect(() => {
        dispatch(
            registerResource({
                name,
                options,
                hasList: !!list,
                hasEdit: !!edit,
                hasShow: !!show,
                hasCreate: !!create,
                icon,
            })
        );
        return () => {
            dispatch(unregisterResource(name));
        };
    }, [dispatch, name, create, edit, icon, list, show, options]);
    return null;
};

const ResourceRoutes: FunctionComponent<ResourceProps> = ({
    name,
    match,
    list,
    create,
    edit,
    show,
    options = defaultOptions,
}) => {
    const isRegistered = useSelector(
        (state: ReduxState) => !!state.admin.resources[name]
    );
    const { loaded: authChecked } = useAuthenticated();
    const { loaded: permissionsLoaded, permissions } = usePermissions();

    const basePath = match ? match.path : '';

    const resourceData = useMemo(
        () => ({
            resource: name,
            options,
            hasList: !!list,
            hasEdit: !!edit,
            hasShow: !!show,
            hasCreate: !!create,
        }),
        [name, options, create, edit, list, show]
    );

    // match tends to change even on the same route ; using memo to avoid an extra render
    return useMemo(() => {
        // if the registration hasn't finished, no need to render
        if (!isRegistered) {
            return null;
        }
        // if the authProvider hasn't returned, no need to render
        if (!authChecked || !permissionsLoaded) {
            return null;
        }

        return (
            <ResourceContextProvider value={name}>
                <Switch>
                    {create &&
                        canAccess({
                            permissions,
                            action: 'create',
                            resource: name,
                        }) && (
                            <Route
                                path={`${basePath}/create`}
                                render={routeProps =>
                                    createElement(create, {
                                        basePath,
                                        permissions,
                                        ...omit(routeProps, 'staticContext'),
                                        ...resourceData,
                                    })
                                }
                            />
                        )}
                    {show &&
                        canAccess({
                            permissions,
                            action: 'show',
                            resource: name,
                        }) && (
                            <Route
                                path={`${basePath}/:id/show`}
                                render={routeProps =>
                                    createElement(show, {
                                        basePath,
                                        id: decodeURIComponent(
                                            (routeProps.match as ResourceMatch)
                                                .params.id
                                        ),
                                        permissions,
                                        ...omit(routeProps, 'staticContext'),
                                        ...resourceData,
                                    })
                                }
                            />
                        )}
                    {edit &&
                        canAccess({
                            permissions,
                            action: 'edit',
                            resource: name,
                        }) && (
                            <Route
                                path={`${basePath}/:id`}
                                render={routeProps =>
                                    createElement(edit, {
                                        basePath,
                                        id: decodeURIComponent(
                                            (routeProps.match as ResourceMatch)
                                                .params.id
                                        ),
                                        permissions,
                                        ...omit(routeProps, 'staticContext'),
                                        ...resourceData,
                                    })
                                }
                            />
                        )}
                    {list &&
                        canAccess({
                            permissions,
                            action: 'list',
                            resource: name,
                        }) && (
                            <Route
                                path={`${basePath}`}
                                render={routeProps =>
                                    createElement(list, {
                                        basePath,
                                        permissions,
                                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                                        // @ts-ignore
                                        syncWithLocation: true,
                                        ...omit(routeProps, 'staticContext'),
                                        ...resourceData,
                                    })
                                }
                            />
                        )}
                </Switch>
            </ResourceContextProvider>
        );
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        basePath,
        name,
        create,
        edit,
        list,
        show,
        options,
        isRegistered,
        authChecked,
        permissionsLoaded,
    ]);
};

export const Resource: FunctionComponent<ResourceProps> = ({
    intent = 'route',
    ...props
}) =>
    intent === 'registration' ? (
        <ResourceRegister {...props} />
    ) : (
        <ResourceRoutes {...props} />
    );
