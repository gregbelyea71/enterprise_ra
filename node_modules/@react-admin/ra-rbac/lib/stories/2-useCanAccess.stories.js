"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminAccess = exports.NoAccess = exports.Basic = void 0;
var react_1 = __importDefault(require("react"));
var react_admin_1 = require("react-admin");
var src_1 = require("../src");
exports.default = { title: 'ra-rbac/useCanAccess' };
var authProvider = {
    checkAuth: function () { return Promise.resolve(); },
    login: function () { return Promise.resolve(); },
    logout: function () { return Promise.resolve(); },
    checkError: function () { return Promise.resolve(); },
    getPermissions: function () { return Promise.resolve(); },
    getRoles: function () { return Promise.resolve(); },
};
var PostRead = function () {
    var _a = src_1.useCanAccess({
        action: 'read',
        resource: 'posts',
    }), loading = _a.loading, canAccess = _a.canAccess;
    if (loading) {
        return react_1.default.createElement("span", null, "Loading");
    }
    return canAccess ? react_1.default.createElement("span", null, "Allowed") : react_1.default.createElement("span", null, "Restricted");
};
var PostWrite = function () {
    var _a = src_1.useCanAccess({
        action: 'write',
        resource: 'posts',
    }), loading = _a.loading, canAccess = _a.canAccess;
    if (loading) {
        return react_1.default.createElement("span", null, "Loading");
    }
    return canAccess ? react_1.default.createElement("span", null, "Allowed") : react_1.default.createElement("span", null, "Restricted");
};
var CommentRead = function () {
    var _a = src_1.useCanAccess({
        action: 'read',
        resource: 'comments',
    }), loading = _a.loading, canAccess = _a.canAccess;
    if (loading) {
        return react_1.default.createElement("span", null, "Loading");
    }
    return canAccess ? react_1.default.createElement("span", null, "Allowed") : react_1.default.createElement("span", null, "Restricted");
};
var App = function () { return (react_1.default.createElement("ul", null,
    react_1.default.createElement("li", null,
        "Read posts: ",
        react_1.default.createElement(PostRead, null)),
    react_1.default.createElement("li", null,
        "Write posts: ",
        react_1.default.createElement(PostWrite, null)),
    react_1.default.createElement("li", null,
        "Read comments: ",
        react_1.default.createElement(CommentRead, null)))); };
var Basic = function () { return (react_1.default.createElement(react_admin_1.AuthContext.Provider, { value: __assign(__assign({}, authProvider), { getPermissions: function () {
            return promiseFor({
                permissions: [{ action: 'read', resource: 'posts' }],
                roles: ['commentReader'],
            });
        }, getRoles: function () {
            return promiseFor({
                commentReader: [{ action: 'read', resource: 'comments' }],
            });
        } }) },
    react_1.default.createElement(App, null))); };
exports.Basic = Basic;
var NoAccess = function () { return (react_1.default.createElement(react_admin_1.AuthContext.Provider, { value: __assign(__assign({}, authProvider), { getPermissions: function () { return promiseFor({ permissions: [] }); } }) },
    react_1.default.createElement(App, null))); };
exports.NoAccess = NoAccess;
var AdminAccess = function () { return (react_1.default.createElement(react_admin_1.AuthContext.Provider, { value: __assign(__assign({}, authProvider), { getPermissions: function () {
            return promiseFor({ permissions: [{ action: '*', resource: '*' }] });
        } }) },
    react_1.default.createElement(App, null))); };
exports.AdminAccess = AdminAccess;
var promiseFor = function (result) {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve(result);
        }, 200);
    });
};
