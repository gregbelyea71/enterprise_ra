"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditActions = void 0;
var React = __importStar(require("react"));
var react_admin_1 = require("react-admin");
var usePermissions_1 = require("../usePermissions");
var canAccess_1 = require("../canAccess");
/**
 * Replacement for react-admin's EditAction that adds RBAC control to actions
 *
 * Users must have the 'show' permission on the resource and record to see the ShowButton.
 * Users must have the 'clone' permission on the resource and record to see the CloneButton.
 *
 * @example
 * import { Edit } from 'react-admin';
 * import { EditActions } from '@react-admin/ra-rbac';
 *
 * export const PostEdit = (props) => (
 *     <Edit actions={<EditActions />} {...props}>
 *         ...
 *     </Edit>
 * );
 */
var EditActions = function (props) {
    var className = props.className;
    var _a = react_admin_1.useEditContext(props), basePath = _a.basePath, record = _a.record, rest = __rest(_a, ["basePath", "record"]);
    var hasEdit = react_admin_1.useResourceDefinition(props).hasEdit;
    var resource = react_admin_1.useResourceContext(props);
    var _b = usePermissions_1.usePermissions(), loading = _b.loading, permissions = _b.permissions;
    if (loading) {
        return null;
    }
    var canShow = hasEdit &&
        canAccess_1.canAccess({
            permissions: permissions,
            action: 'show',
            resource: resource,
            record: record,
        });
    var canClone = canAccess_1.canAccess({
        permissions: permissions,
        action: 'clone',
        resource: resource,
        record: record,
    });
    if (!canShow && !canClone) {
        return React.createElement("div", { style: { marginTop: '1em' } });
    }
    return (React.createElement(react_admin_1.TopToolbar, __assign({ className: className }, sanitizeRestProps(rest)),
        canShow && React.createElement(react_admin_1.ShowButton, { basePath: basePath, record: record }),
        canClone && React.createElement(react_admin_1.CloneButton, { basePath: basePath, record: record })));
};
exports.EditActions = EditActions;
exports.EditActions.propTypes = react_admin_1.EditActions.propTypes;
var sanitizeRestProps = function (_a) {
    var basePath = _a.basePath, defaultTitle = _a.defaultTitle, className = _a.className, hasCreate = _a.hasCreate, hasList = _a.hasList, hasEdit = _a.hasEdit, loaded = _a.loaded, loading = _a.loading, refetch = _a.refetch, resource = _a.resource, rest = __rest(_a, ["basePath", "defaultTitle", "className", "hasCreate", "hasList", "hasEdit", "loaded", "loading", "refetch", "resource"]);
    return rest;
};
