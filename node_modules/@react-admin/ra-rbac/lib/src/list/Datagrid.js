"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Datagrid = void 0;
var React = __importStar(require("react"));
var react_1 = require("react");
var react_admin_1 = require("react-admin");
var usePermissions_1 = require("../usePermissions");
var canAccess_1 = require("../canAccess");
/**
 * Alternative to react-admin's <Datagrid> that adds RBAC control to columns
 *
 * To see a column, the user must have the permission to read the resource column:
 * { "action": "read", "resource": `${resource}.${source}` }
 *
 * Also, the rowClick prop is automatically set depending on the user props:
 * - "edit" if the user has the permission to edit the resource
 * - "show" if the user doesn't have the permission to edit the resource but has the permission to show it
 * - empty otherwise
 *
 * @example
 * import { Datagrid } from '@react-admin/ra-rbac';
 *
 * const authProvider= {
 *     // ...
 *     getPermissions: () => Promise.resolve([
 *         { action: "list", resource: "products" },
 *         { action: "read", resource: "products.thumbnail" },
 *         { action: "read", resource: "products.reference" },
 *         { action: "read", resource: "products.category_id" },
 *         { action: "read", resource: "products.width" },
 *         { action: "read", resource: "products.height" },
 *         { action: "read", resource: "products.price" },
 *         { action: "read", resource: "products.description" },
 *     ]),
 * };
 *
 * const ProductList = props => (
 *     <List {...props}>
 *         <Datagrid rowClick="edit"> // <-- RBAC Datagrid
 *             <ImageField source="thumbnail" />
 *             <TextField source="reference" />
 *             <ReferenceField source="category_id" reference="categories">
 *                 <TextField source="name" />
 *             </ReferenceField>
 *             <NumberField source="width" />
 *             <NumberField source="height" />
 *             <NumberField source="price" />
 *             <TextField source="description" />
 *             {
 *                // these two columns are not visible to the user
 *             }
 *             <NumberField source="stock" />
 *             <NumberField source="sales" />
 *         </Datagrid>
 *     </List>
 * );
 */
var Datagrid = function (props) {
    var resource = react_admin_1.useResourceContext();
    var children = props.children, rest = __rest(props, ["children"]);
    var _a = usePermissions_1.usePermissions(), loading = _a.loading, permissions = _a.permissions;
    if (loading)
        return null;
    var defaultRowClick = canAccess_1.canAccess({ permissions: permissions, resource: resource, action: 'edit' })
        ? 'edit'
        : canAccess_1.canAccess({ permissions: permissions, resource: resource, action: 'show' })
            ? 'show'
            : '';
    return (React.createElement(react_admin_1.Datagrid, __assign({ rowClick: defaultRowClick }, rest), react_1.Children.map(children, function (child) {
        return react_1.isValidElement(child) &&
            canAccess_1.canAccess({
                permissions: permissions,
                action: 'read',
                resource: resource + "." + child.props.source,
            })
            ? child
            : null;
    })));
};
exports.Datagrid = Datagrid;
