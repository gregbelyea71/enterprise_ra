"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.List = void 0;
var React = __importStar(require("react"));
var react_admin_1 = require("react-admin");
var usePermissions_1 = require("../usePermissions");
var canAccess_1 = require("../canAccess");
var ListActions_1 = require("./ListActions");
/**
 * Replacement for react-admin's List that adds RBAC control to actions and bulk actions
 *
 * Users must have the 'create' permission on the resource to see the CreateButton.
 * Users must have the 'export' permission on the resource to see the ExportButton and the BulkExportButton.
 * Users must have the 'delete' permission on the resource to see the BulkExportButton.
 *
 * @example
 * import { List } from '@react-admin/ra-rbac';
 *
 * const authProvider = {
 *      // ...
 *      getPermissions: () => Promise.resolve({
 *           permissions: [
 *                 { action: 'list', resource: 'products' },
 *                 { action: 'create', resource: 'products' },
 *                 { action: 'delete', resource: 'products' },
 *                 // action 'export' is missing
 *           ],
 *       }),
 * };
 *
 * export const PostList = (props) => (
 *     <List {...props}>
 *         ...
 *     </List>
 * );
 * // user will see the following actions on top of the list:
 * // - create
 * // user will see the following bulk actions upon selection:
 * // - delete
 */
var List = function (props) {
    var exporter = react_admin_1.useListContext().exporter;
    var resource = react_admin_1.useResourceContext();
    var _a = usePermissions_1.usePermissions(), loading = _a.loading, permissions = _a.permissions;
    if (loading) {
        return null;
    }
    var canExport = canAccess_1.canAccess({
        action: 'export',
        resource: resource,
        permissions: permissions,
    });
    var canDelete = canAccess_1.canAccess({
        action: 'delete',
        resource: resource,
        permissions: permissions,
    });
    var bulkActionButtons = props.bulkActionButtons ? (props.bulkActionButtons) : canExport || canDelete ? (React.createElement(React.Fragment, null,
        exporter !== false && canExport && React.createElement(react_admin_1.BulkExportButton, null),
        canDelete && React.createElement(react_admin_1.BulkDeleteButton, null))) : (false);
    return (React.createElement(react_admin_1.List, __assign({ bulkActionButtons: bulkActionButtons, actions: React.createElement(ListActions_1.ListActions, null) }, props)));
};
exports.List = List;
exports.List.propTypes = react_admin_1.List.propTypes;
exports.List.defaultProps = react_admin_1.List.defaultProps;
