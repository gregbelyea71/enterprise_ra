"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithPermissions = void 0;
var React = __importStar(require("react"));
var useCanAccess_1 = require("./useCanAccess");
/**
 * Render the child only if the user has the specified permissions.
 *
 * It accepts the following props:
 *
 * - `action` (string, required): the action to check, e.g. 'read', 'list', 'export', 'delete', etc.
 * - `resource` (string required): the resource to check, e.g. 'users', 'comments', 'posts', etc.
 * - `record` (object, optional): the record to check. If passed, the child only renders if the user has permissions for that record, e.g. `{ id: 123, firstName: "John", lastName: "Doe" }`
 *
 * Additional props are passed down to the child element.
 *
 * @example
 * import { WithPermissions } from '@react-admin/ra-rbac';
 *
 * const RecordToolbar = ({ resource }) => (
 *     <Toolbar>
 *         <WithPermissions action="edit" resource={resource}>
 *             <EditButton />
 *         </WithPermissions>
 *         <WithPermissions action="show" resource={resource}>
 *             <ShowButton />
 *         </WithPermissions>
 *         <WithPermissions action="delete" resource={resource}>
 *             <DeleteButton />
 *         </WithPermissions>
 *     </Toolbar>
 * );
 */
var WithPermissions = function (_a) {
    var action = _a.action, resource = _a.resource, record = _a.record, children = _a.children, props = __rest(_a, ["action", "resource", "record", "children"]);
    var _b = useCanAccess_1.useCanAccess({ action: action, resource: resource, record: record }), canAccess = _b.canAccess, loading = _b.loading;
    return loading || !canAccess ? null : (React.createElement(React.Fragment, null, React.isValidElement(children)
        ? React.cloneElement(children, props)
        : children));
};
exports.WithPermissions = WithPermissions;
