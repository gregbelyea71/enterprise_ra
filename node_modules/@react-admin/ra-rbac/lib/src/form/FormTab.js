"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormTab = void 0;
var React = __importStar(require("react"));
var react_admin_1 = require("react-admin");
var usePermissions_1 = require("../usePermissions");
var canAccess_1 = require("../canAccess");
/**
 * Replacement for the default <FormTab> that only renders a tab if the user has the right permissions.
 *
 * Add a name prop to the FormTab to define the sub-resource that the user needs to have the right permissions for.
 *
 * <FormTab> also only renders the child inputs for which the user has the 'write' permissions.
 *
 * @example
 * import { Edit, TabbedForm, TextInput } from 'react-admin';
 * import { FormTab } from '@react-admin/ra-rbac';
 *
 * const authProvider = {
 *     // ...
 *     getPermissions: () =>
 *         promiseFor({
 *             permissions: [
 *                 { action: ['list', 'edit'], resource: 'products' },
 *                 { action: 'write', resource: 'products.reference' },
 *                 { action: 'write', resource: 'products.width' },
 *                 { action: 'write', resource: 'products.height' },
 *                 // 'products.description' is missing
 *                 { action: 'write', resource: 'products.thumbnail' },
 *                 // 'products.image' is missing
 *                 { action: 'write', resource: 'products.tab.description' },
 *                 { action: 'write', resource: 'products.tab.images' },
 *                 // 'products.tab.stock' is missing
 *             ],
 *         }),
 * };
 *
 * const ProductEdit = props => (
 *     <Edit {...props}>
 *         <TabbedForm>
 *             <FormTab label="Description" name="description">
 *                 <TextInput source="reference" />
 *                 <TextInput source="width" />
 *                 <TextInput source="height" />
 *                 // not displayed
 *                 <TextInput source="description" />
 *             </FormTab>
 *             <FormTab label="Images" name="images">
 *                 // not displayed
 *                 <TextInput source="image" />
 *                 <TextInput source="thumbnail" />
 *             </FormTab>
 *             // not displayed
 *             <FormTab label="Stock" name="stock">
 *                 <TextInput source="stock" />
 *             </FormTab>
 *         </TabbedForm>
 *     </Edit>
 * );
 */
var FormTab = function (_a) {
    var name = _a.name, basePath = _a.basePath, className = _a.className, classes = _a.classes, contentClassName = _a.contentClassName, children = _a.children, hidden = _a.hidden, icon = _a.icon, intent = _a.intent, label = _a.label, margin = _a.margin, path = _a.path, record = _a.record, resource = _a.resource, variant = _a.variant, value = _a.value, rest = __rest(_a, ["name", "basePath", "className", "classes", "contentClassName", "children", "hidden", "icon", "intent", "label", "margin", "path", "record", "resource", "variant", "value"]);
    var resourceFromContext = react_admin_1.useResourceContext();
    var recordFromContext = react_admin_1.useRecordContext();
    var _b = usePermissions_1.usePermissions(), permissions = _b.permissions, loading = _b.loading;
    var renderHeader = function () {
        return (React.createElement(react_admin_1.FormTabHeader, __assign({ label: label, value: value, icon: icon, className: className, classes: classes }, rest)));
    };
    var renderContent = function () { return (React.createElement(react_admin_1.FormGroupContextProvider, { name: value.toString() },
        React.createElement("span", { style: hidden ? hiddenStyle : null, className: contentClassName, id: "tabpanel-" + value, "aria-labelledby": "tabheader-" + value, "aria-hidden": hidden || undefined }, React.Children.map(children, function (input) {
            return input &&
                canAccess_1.canAccess({
                    permissions: permissions,
                    action: 'write',
                    resource: resource + "." + input.props.source,
                }) && (React.createElement(react_admin_1.FormInput, { basePath: basePath, input: input, record: record, resource: resource, variant: input.props.variant || variant, margin: input.props.margin || margin }));
        })))); };
    if (loading ||
        !canAccess_1.canAccess({
            permissions: permissions,
            action: 'write',
            resource: resourceFromContext + ".tab." + name,
            record: recordFromContext,
        })) {
        return null;
    }
    return intent === 'header' ? renderHeader() : renderContent();
};
exports.FormTab = FormTab;
var hiddenStyle = { display: 'none' };
exports.FormTab.displayName = 'FormTab';
