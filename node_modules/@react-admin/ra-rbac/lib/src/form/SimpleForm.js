"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleForm = void 0;
var React = __importStar(require("react"));
var react_1 = require("react");
var react_admin_1 = require("react-admin");
var usePermissions_1 = require("../usePermissions");
var canAccess_1 = require("../canAccess");
var Toolbar_1 = require("./Toolbar");
/**
 * Alternative to react-admin's <SimpleForm> that adds RBAC control to inputs
 *
 * To see an input, the user must have the permission to write the resource field:
 * { "action": "write", "resource": `${resource}.${source}` }
 *
 * SimpleForm also renders the delete button only if the user has the 'delete' permission.
 *
 * @example
 * import { SimpleForm } from '@react-admin/ra-rbac';
 *
 * const authProvider = {
 *     // ...
 *     getPermissions: () => Promise.resolve({
 *         permissions: [
 *             // 'delete' is missing
 *             { action: ['list', 'edit'], resource: 'products' },
 *             { action: 'write', resource: 'products.reference' },
 *             { action: 'write', resource: 'products.width' },
 *             { action: 'write', resource: 'products.height' },
 *             // 'products.description' is missing
 *             { action: 'write', resource: 'products.thumbnail' },
 *             // 'products.image' is missing
 *         ]
 *     }),
 * };
 *
 * const ProductEdit = props => (
 *     <Edit {...props}>
 *         <SimpleForm> // <-- RBAC SimpleForm
 *             <TextInput source="reference" />
 *             <TextInput source="width" />
 *             <TextInput source="height" />
 *             // not displayed
 *             <TextInput source="description" />
 *             // not displayed
 *             <TextInput source="image" />
 *             <TextInput source="thumbnail" />
 *             // no delete button
 *         </SimpleForm>
 *     </Edit>
 * );
 */
var SimpleForm = function (props) {
    var resource = react_admin_1.useResourceContext();
    var children = props.children, rest = __rest(props, ["children"]);
    var _a = usePermissions_1.usePermissions(), loading = _a.loading, permissions = _a.permissions;
    if (loading)
        return null;
    return (React.createElement(react_admin_1.SimpleForm, __assign({ toolbar: React.createElement(Toolbar_1.Toolbar, null) }, rest), react_1.Children.map(children, function (child) {
        return react_1.isValidElement(child) &&
            canAccess_1.canAccess({
                permissions: permissions,
                action: 'write',
                resource: resource + "." + child.props.source,
            })
            ? child
            : null;
    })));
};
exports.SimpleForm = SimpleForm;
exports.SimpleForm.propTypes = react_admin_1.SimpleForm.propTypes;
