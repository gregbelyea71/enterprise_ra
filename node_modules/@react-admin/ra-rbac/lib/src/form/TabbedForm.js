"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TabbedForm = void 0;
var React = __importStar(require("react"));
var react_admin_1 = require("react-admin");
var Toolbar_1 = require("./Toolbar");
/**
 * Alternative to react-admin's <TabbedForm> that adds RBAC control to the delete button.
 *
 * Use in conjunction with ra-rbac's <FormTab> to render inputs based on permissions.
 *
 * @example
 * import { TabbedForm } from '@react-admin/ra-rbac';
 *
 * const authProvider = {
 *     checkAuth: () => Promise.resolve(),
 *     login: () => Promise.resolve(),
 *     logout: () => Promise.resolve(),
 *     checkError: () => Promise.resolve(),
 *     getPermissions: () =>Promise.resolve({
 *         permissions: [
 *             // 'delete' is missing
 *             { action: ['list', 'edit'], resource: 'products' },
 *         ],
 *     }),
 * };
 *
 * const ProductEdit = props => (
 *     <Edit {...props}>
 *         <TabbedForm>
 *             <FormTab label="Description">
 *                 <TextInput source="reference" />
 *                 <TextInput source="width" />
 *                 <TextInput source="height" />
 *                 <TextInput source="description" />
 *             </FormTab>
 *             <FormTab label="Images">
 *                 <TextInput source="image" />
 *                 <TextInput source="thumbnail" />
 *             </FormTab>
 *             <FormTab label="Stock">
 *                 <TextInput source="stock" />
 *             </FormTab>
 *             // delete button not displayed
 *         </TabbedForm>
 *     </Edit>
 * );
 */
var TabbedForm = function (props) { return (React.createElement(react_admin_1.TabbedForm, __assign({ toolbar: React.createElement(Toolbar_1.Toolbar, null) }, props))); };
exports.TabbedForm = TabbedForm;
exports.TabbedForm.propTypes = react_admin_1.TabbedForm.propTypes;
