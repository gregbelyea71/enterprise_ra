"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCanAccess = void 0;
var usePermissions_1 = require("./usePermissions");
var canAccess_1 = require("./canAccess");
/**
 * Checks if the user can access a resource.
 *
 * `useCanAccess` returns an object describing the state of the RBAC request.
 * As calls to the `authProvider` are asynchronous, the hook returns
 * a `loading` state in addition to the `canAccess` key.
 *
 * @example
 * import { useCanAccess } from '@react-admin/ra-rbac';
 *
 * const DeleteUserButton = ({ record }) => {
 *     const { loading, canAccess } = useCanAccess({ action: 'delete', resource: 'users', record });
 *     if (loading || !canAccess) return null;
 *     return <DeleteButton record={record} resource="users" />;
 * };
 */
var useCanAccess = function (_a) {
    var action = _a.action, resource = _a.resource, record = _a.record;
    var _b = usePermissions_1.usePermissions(), permissions = _b.permissions, loaded = _b.loaded;
    return loaded
        ? {
            canAccess: canAccess_1.canAccess({ permissions: permissions, action: action, resource: resource, record: record }),
            loaded: true,
            loading: false,
        }
        : { canAccess: false, loaded: false, loading: true };
};
exports.useCanAccess = useCanAccess;
