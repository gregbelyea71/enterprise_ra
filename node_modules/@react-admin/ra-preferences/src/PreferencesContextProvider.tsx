import * as React from 'react';
import { ReactNode, useCallback, useEffect, useMemo } from 'react';
import { OnFailure, OnSuccess, useAuthState, useDataProvider } from 'ra-core';
import { PreferencesContext } from './PreferencesContext';
import { writeStorage } from './preferencesStorage';

/**
 * A provider for PreferencesContext which gives access to preferences related configuration. It also preloads the currently logged user preferences.
 * @param props
 * @param {ReactNode} props.children
 * @param {boolean} props.synchronize A boolean indicating whether preferences should be synchronized with the backend using the dataProvider.
 */
export const PreferencesContextProvider = ({
    children,
    onSuccess,
    onFailure,
    synchronize = false,
}: PreferencesContextProviderProps) => {
    const dataProvider = useDataProvider();
    const { authenticated } = useAuthState();

    useEffect(() => {
        if (authenticated && synchronize) {
            dataProvider.getPreferences().then(({ data }) => {
                writeStorage('', data);
            });
        }
    }, [authenticated, dataProvider, synchronize]);

    const updatePreferences = useCallback(
        (data: any, previousData: any) => {
            if (!synchronize) {
                return;
            }
            dataProvider.setPreferences(
                {
                    data,
                    previousData,
                },
                {
                    onSuccess,
                    onFailure,
                }
            );
        },
        [dataProvider, synchronize] // eslint-disable-line
    );

    const context = useMemo(
        () => ({
            updatePreferences,
        }),
        [updatePreferences]
    );

    return (
        <PreferencesContext.Provider value={context}>
            {children}
        </PreferencesContext.Provider>
    );
};

export type PreferencesContextProviderProps = {
    children: ReactNode;
    onSuccess?: OnSuccess;
    onFailure?: OnFailure;
    synchronize?: boolean;
};
