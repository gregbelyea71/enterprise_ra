"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreferencesContextProvider = void 0;
var React = __importStar(require("react"));
var react_1 = require("react");
var ra_core_1 = require("ra-core");
var PreferencesContext_1 = require("./PreferencesContext");
var preferencesStorage_1 = require("./preferencesStorage");
/**
 * A provider for PreferencesContext which gives access to preferences related configuration. It also preloads the currently logged user preferences.
 * @param props
 * @param {ReactNode} props.children
 * @param {boolean} props.synchronize A boolean indicating whether preferences should be synchronized with the backend using the dataProvider.
 */
var PreferencesContextProvider = function (_a) {
    var children = _a.children, onSuccess = _a.onSuccess, onFailure = _a.onFailure, _b = _a.synchronize, synchronize = _b === void 0 ? false : _b;
    var dataProvider = ra_core_1.useDataProvider();
    var authenticated = ra_core_1.useAuthState().authenticated;
    react_1.useEffect(function () {
        if (authenticated && synchronize) {
            dataProvider.getPreferences().then(function (_a) {
                var data = _a.data;
                preferencesStorage_1.writeStorage('', data);
            });
        }
    }, [authenticated, dataProvider, synchronize]);
    var updatePreferences = react_1.useCallback(function (data, previousData) {
        if (!synchronize) {
            return;
        }
        dataProvider.setPreferences({
            data: data,
            previousData: previousData,
        }, {
            onSuccess: onSuccess,
            onFailure: onFailure,
        });
    }, [dataProvider, synchronize] // eslint-disable-line
    );
    var context = react_1.useMemo(function () { return ({
        updatePreferences: updatePreferences,
    }); }, [updatePreferences]);
    return (React.createElement(PreferencesContext_1.PreferencesContext.Provider, { value: context }, children));
};
exports.PreferencesContextProvider = PreferencesContextProvider;
