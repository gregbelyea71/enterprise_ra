export declare const getPreferencesStorage: () => {
    getItem(key: string): string;
    setItem(key: string, value: string): void;
};
/**
 * reads key preference from storage
 *
 * @param {string} key Path of the preference key to read, uses lodash.get
 *
 * @return {T} Preference value

 * @example // Read full preferences
 *
 * const preferences = readStorage<PreferenceType>();
 *
 * @example // read preference for a particular key
 *
 * const density = readStorage<string>('density');

 * @example // read preference for a deep key
 *
 * const columns = readStorage<string[]>('orders.list.columns');
 */
export declare const readStorage: <T>(key?: string) => T;
/**
 * sets key preference to value on the preference storage
 *
 * @param {string} key Path of the preference key to update, uses lodash.set
 * @param {T} value New preference value
 *
 * @return {void}
 *
 * @example // Write full preferences to localstorage
 *
 * writeStorage<PreferenceType>('', {
 *      users: {
 *          lists: {
 *              columns: ['id', 'address'],
 *          },
 *      },
 *  });
 *
 * @example // Update preference for a particular key
 *
 * writeStorage<string>('density', 'small');
 *
 * @example // Update preference for a deep key
 *
 * writeStorage<string[]>('orders.list.columns', ['id', 'date', 'customer']);
 */
export declare const writeStorage: <T>(key: any, value?: T) => any;
export declare const overwriteStorage: (value: any) => void;
export interface KeyValuePair<K, V> {
    key: K;
    value: V;
}
export declare const PreferencesChanged: {
    eventName: string;
    create: <T>(payload: KeyValuePair<string, T>) => CustomEvent<KeyValuePair<string, T>>;
};
//# sourceMappingURL=preferencesStorage.d.ts.map