import * as React from 'react';
import { useCallback, useEffect, useMemo } from 'react';
import { useAuthState, useDataProvider } from 'ra-core';
import { PreferencesContext } from './PreferencesContext';
import { writeStorage } from './preferencesStorage';
/**
 * A provider for PreferencesContext which gives access to preferences related configuration. It also preloads the currently logged user preferences.
 * @param props
 * @param {ReactNode} props.children
 * @param {boolean} props.synchronize A boolean indicating whether preferences should be synchronized with the backend using the dataProvider.
 */
export var PreferencesContextProvider = function (_a) {
    var children = _a.children, onSuccess = _a.onSuccess, onFailure = _a.onFailure, _b = _a.synchronize, synchronize = _b === void 0 ? false : _b;
    var dataProvider = useDataProvider();
    var authenticated = useAuthState().authenticated;
    useEffect(function () {
        if (authenticated && synchronize) {
            dataProvider.getPreferences().then(function (_a) {
                var data = _a.data;
                writeStorage('', data);
            });
        }
    }, [authenticated, dataProvider, synchronize]);
    var updatePreferences = useCallback(function (data, previousData) {
        if (!synchronize) {
            return;
        }
        dataProvider.setPreferences({
            data: data,
            previousData: previousData,
        }, {
            onSuccess: onSuccess,
            onFailure: onFailure,
        });
    }, [dataProvider, synchronize] // eslint-disable-line
    );
    var context = useMemo(function () { return ({
        updatePreferences: updatePreferences,
    }); }, [updatePreferences]);
    return (React.createElement(PreferencesContext.Provider, { value: context }, children));
};
