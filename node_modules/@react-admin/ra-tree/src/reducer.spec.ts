import {
    CRUD_GET_CHILD_NODES_SUCCESS,
    CRUD_GET_ROOT_NODES_SUCCESS,
} from './actions';
import { GET_CHILD_NODES, GET_ROOT_NODES } from './fetchTypes';
import { reducer } from './reducer';

describe('reducer', () => {
    describe('lazy loading support', () => {
        test('GET_ROOT_NODES should populate the nodes key with a map of the records', () => {
            expect(
                reducer(undefined, {
                    type: CRUD_GET_ROOT_NODES_SUCCESS,
                    payload: {
                        data: [
                            { id: 1, title: 'one' },
                            { id: 2, title: 'two' },
                        ],
                    },
                    meta: {
                        fetchResponse: GET_ROOT_NODES,
                        resource: 'categories',
                    },
                })
            ).toEqual({
                categories: {
                    nodes: {
                        1: [],
                        2: [],
                    },
                    expanded: [],
                },
            });
        });
        test('GET_CHILD_NODES should populate the parent nodes key with its children', () => {
            expect(
                reducer(
                    {
                        categories: {
                            nodes: {
                                1: [],
                                2: [],
                            },
                            expanded: [],
                        },
                    },
                    {
                        type: CRUD_GET_CHILD_NODES_SUCCESS,
                        payload: {
                            data: [
                                { id: 4, title: 'one' },
                                { id: 5, title: 'two' },
                            ],
                        },
                        requestPayload: {
                            parentId: 1,
                        },
                        meta: {
                            fetchResponse: GET_CHILD_NODES,
                            resource: 'categories',
                        },
                    }
                )
            ).toEqual({
                categories: {
                    nodes: {
                        1: [4, 5],
                        2: [],
                        4: [],
                        5: [],
                    },
                    expanded: [],
                },
            });
        });
    });
});
