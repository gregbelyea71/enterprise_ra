import { AuthProvider, DataProvider } from 'react-admin';
import { DefaultAuditLogResource } from '../constants';
import { buildMatchActionOnResource } from './buildMatchActionOnResource';
import { DefaultOptions } from './options';
import { AddAuditLogsOptions } from './types';

export const addEventsForMutations = (
    dataProvider: DataProvider,
    authProvider: AuthProvider,
    options: AddAuditLogsOptions = DefaultOptions
): DataProvider => {
    const {
        name: eventsResource = DefaultAuditLogResource,
        shouldAudit = buildMatchActionOnResource(options),
    } = options;

    if (!authProvider.getIdentity) {
        throw new Error(
            'The getIdentity method of the authProvider is required for audit logs. Please refer to the documentation to implement it: https://marmelab.com/react-admin/Authentication.html#building-your-own-auth-provider'
        );
    }

    const proxy = new Proxy(defaultDataProvider, {
        get(_, name) {
            return async (...args) => {
                const action = name.toString();
                const result = await dataProvider[action](...args);
                // We might not have a resource on custom dataProvider methods
                const [resourceNameOrParams, params] = args;

                if (shouldAudit(action, ...args)) {
                    const author = await authProvider.getIdentity();
                    const date = new Date().toISOString();
                    const resource =
                        typeof resourceNameOrParams === 'string'
                            ? resourceNameOrParams
                            : undefined;

                    if (action === 'updateMany' || action === 'deleteMany') {
                        // Create an event log for each record
                        const { ids, ...payload } =
                            params || resourceNameOrParams;

                        for (const id of ids) {
                            await dataProvider.create(eventsResource, {
                                data: {
                                    date,
                                    author,
                                    resource,
                                    action,
                                    payload: { id, ...payload },
                                },
                            });
                        }
                    } else {
                        await dataProvider.create(eventsResource, {
                            data: {
                                date,
                                author,
                                resource,
                                action,
                                payload:
                                    action === 'create'
                                        ? result
                                        : params || resourceNameOrParams,
                            },
                        });
                    }
                }

                return result;
            };
        },
    });

    return proxy;
};

const defaultDataProvider = {
    create: () => Promise.resolve(null),
    delete: () => Promise.resolve(null),
    deleteMany: () => Promise.resolve(null),
    getList: () => Promise.resolve(null),
    getMany: () => Promise.resolve(null),
    getManyReference: () => Promise.resolve(null),
    getOne: () => Promise.resolve(null),
    update: () => Promise.resolve(null),
    updateMany: () => Promise.resolve(null),
};
